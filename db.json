{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1592450816000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1592450816000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1592450816000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1592450816000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1592450816000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1592450816000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1592450816000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1592450816000},{"_id":"themes/next/_config.yml","hash":"d868b6687a9e966348010b3fc807bc1b3f7cdbcf","modified":1595170746944},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1592450816000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1592450816000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1592450816000},{"_id":"source/_posts/golang-dispatch.md","hash":"949a260d6a53fd0a1f7e4e96d133e52277e60057","modified":1594569072138},{"_id":"source/_posts/golang-lockg.md","hash":"4c6f1421729d06c7dd2ccb25f0142ff79561815f","modified":1594742201380},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1594192468314},{"_id":"source/_posts/golang-gmp.md","hash":"36a16cd11f858d935afbfedc324ac5a3d2a6d7ee","modified":1595176487752},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1592450816000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1592450816000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1592450816000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1592450816000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1592450816000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1592450816000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1592450816000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1592450816000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1592450816000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1592450816000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1592450816000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1592450816000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1592450816000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1592450816000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1592450816000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1592450816000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1592450816000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1592450816000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1592450816000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1592450816000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1592450816000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1592450816000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1592450816000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1592450816000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1592450816000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1592450816000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1592450816000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1592450816000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1592450816000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1592450816000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1592450816000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1592450816000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1592450816000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1592450816000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1592450816000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1592450816000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1592450816000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1592450816000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1592450816000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1592450816000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1592450816000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1592450816000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1592450816000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1592450816000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1592450816000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1592450816000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1592450816000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1592450816000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1592450816000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1592450816000},{"_id":"source/_posts/golang-gmp/1767848-9c4b06362907280d.webp","hash":"a2d94ed54535836041705f8ca5dc646e8f6fb794","modified":1595153099065},{"_id":"source/_posts/golang-gmp/3184f3.jpg","hash":"b2c90a1b47cc0bf045ec6b94212ab7c6d9ef4f2d","modified":1595153094813},{"_id":"source/_posts/golang-gmp/567399-d400f4b192f3dc48.webp","hash":"174a3c0d3aae5476bdba0db5ea0c918fd462e5e1","modified":1595153096888},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1592450816000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1592450816000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1592450816000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1592450816000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1592450816000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1592450816000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1592450816000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1592450816000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1592450816000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1592450816000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1592450816000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1592450816000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1592450816000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1592450816000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1592450816000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1592450816000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1592450816000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1592450816000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1592450816000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1592450816000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1592450816000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1592450816000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1592450816000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1592450816000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1592450816000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1592450816000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1592450816000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1592450816000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1592450816000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1592450816000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1592450816000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1592450816000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1592450816000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1592450816000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1592450816000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1592450816000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1592450816000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1592450816000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1592450816000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1592450816000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1592450816000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1592450816000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1592450816000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1592450816000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1592450816000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1592450816000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592450816000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592450816000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1592450816000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1592450816000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592450816000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1592450816000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592450816000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1592450816000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1592450816000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1592450816000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1592450816000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1592450816000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1592450816000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1592450816000},{"_id":"themes/next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1592450816000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1592450816000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1592450816000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1592450816000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1592450816000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1592450816000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1592450816000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1592450816000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1592450816000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1592450816000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592450816000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1592450816000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1592450816000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1592450816000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1592450816000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1592450816000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1592450816000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1592450816000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1592450816000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1592450816000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1592450816000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1592450816000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1592450816000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1592450816000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1592450816000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1592450816000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1592450816000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1592450816000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1592450816000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1592450816000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1592450816000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1592450816000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1592450816000},{"_id":"public/2020/07/12/golang-lockg/index.html","hash":"729ebd7abee259577894d4d3c98d420a34a3751d","modified":1595171370912},{"_id":"public/archives/index.html","hash":"fee8acba875f39d477eba5e91882bf3ea1525009","modified":1595171370912},{"_id":"public/2020/07/08/hello-world/index.html","hash":"138106c4e631cf3f0872dd8060be6a1dc9bd55d8","modified":1595171370912},{"_id":"public/archives/2020/index.html","hash":"d83e7a13eba43514eda19252495d9f28b37a0188","modified":1595171370912},{"_id":"public/archives/2020/07/index.html","hash":"0d90ceecf2ff5ed06f769c18f63160838530c8e6","modified":1595171370912},{"_id":"public/2020/07/19/golang-gmp/index.html","hash":"decb6cc86e0213f9559f972ae235386bd47fe0b7","modified":1595257496609},{"_id":"public/2020/07/08/golang-dispatch/index.html","hash":"9749f7488674525cced829eacbf77c31d63e8d5c","modified":1595171370912},{"_id":"public/index.html","hash":"67fc5fefdec2fb81b33f138995df18c8d8ef82ec","modified":1595257496609},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1595171370912},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1595171370912},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1595171370912},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1595171370912},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1595171370912},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1595171370912},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1595171370912},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1595171370912},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1595171370912},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1595171370912},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1595171370912},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1595171370912},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1595171370912},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1595171370912},{"_id":"public/2020/07/19/golang-gmp/1767848-9c4b06362907280d.webp","hash":"a2d94ed54535836041705f8ca5dc646e8f6fb794","modified":1595171370912},{"_id":"public/2020/07/19/golang-gmp/567399-d400f4b192f3dc48.webp","hash":"174a3c0d3aae5476bdba0db5ea0c918fd462e5e1","modified":1595171370912},{"_id":"public/2020/07/19/golang-gmp/3184f3.jpg","hash":"b2c90a1b47cc0bf045ec6b94212ab7c6d9ef4f2d","modified":1595171370912},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1595171370912},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1595171370912},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1595171370912},{"_id":"public/css/main.css","hash":"d8a65454b3a45b96e999dbb77bf5b2bb221d959f","modified":1595171370912},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1595171370912},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1595171370912},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1595171370912},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1595171370912},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1595171370912},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1595171370912},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1595171370912},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1595171370912},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1595171370912},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1595171370912},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1595171370912}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-08T07:22:40.504Z","updated":"2020-07-08T07:14:28.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckct7ukp40000jtuy5y3ufa01","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Golang-Lockg学习","date":"2020-07-12T15:51:41.000Z","_content":"## 前言\n\n## GMP的关系\n\n## G的调度\n\n## 抢占逻辑\n\n## 锁协程\n\n## GMP清理","source":"_posts/golang-lockg.md","raw":"---\ntitle: Golang-Lockg学习\ndate: 2020-07-12 23:51:41\ntags:\n---\n## 前言\n\n## GMP的关系\n\n## G的调度\n\n## 抢占逻辑\n\n## 锁协程\n\n## GMP清理","slug":"golang-lockg","published":1,"updated":"2020-07-14T15:56:41.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckct7ukpe0001jtuyg47l3wej","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"GMP的关系\"><a href=\"#GMP的关系\" class=\"headerlink\" title=\"GMP的关系\"></a>GMP的关系</h2><h2 id=\"G的调度\"><a href=\"#G的调度\" class=\"headerlink\" title=\"G的调度\"></a>G的调度</h2><h2 id=\"抢占逻辑\"><a href=\"#抢占逻辑\" class=\"headerlink\" title=\"抢占逻辑\"></a>抢占逻辑</h2><h2 id=\"锁协程\"><a href=\"#锁协程\" class=\"headerlink\" title=\"锁协程\"></a>锁协程</h2><h2 id=\"GMP清理\"><a href=\"#GMP清理\" class=\"headerlink\" title=\"GMP清理\"></a>GMP清理</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"GMP的关系\"><a href=\"#GMP的关系\" class=\"headerlink\" title=\"GMP的关系\"></a>GMP的关系</h2><h2 id=\"G的调度\"><a href=\"#G的调度\" class=\"headerlink\" title=\"G的调度\"></a>G的调度</h2><h2 id=\"抢占逻辑\"><a href=\"#抢占逻辑\" class=\"headerlink\" title=\"抢占逻辑\"></a>抢占逻辑</h2><h2 id=\"锁协程\"><a href=\"#锁协程\" class=\"headerlink\" title=\"锁协程\"></a>锁协程</h2><h2 id=\"GMP清理\"><a href=\"#GMP清理\" class=\"headerlink\" title=\"GMP清理\"></a>GMP清理</h2>"},{"title":"Golang-GMP模型","date":"2020-07-19T10:04:28.000Z","_content":"\n## 前言\n\n\n## GMP模型\n\n### 关于线程和协程\n\n在计算机操作系统中,轻量级进程（LWP）是一种实现多任务的方法。与普通进程相比，LWP与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源；与线程相比，LWP有它自己的进程标识符，优先级，状态，以及栈和局部存储区，并和其他进程有着父子关系；这是和类Unix操作系统的系统调用vfork()生成的进程一样的。另外，线程既可由应用程序管理，又可由内核管理，而LWP只能由内核管理并像普通进程一样被调度。Linux内核是支持LWP的典型例子。\n\n![img](1767848-9c4b06362907280d.webp)\n\n### Golang中的模型\n\n有2个支持高并发的模型：CSP和Actor（erlang）。Go选择了CSP，Go为了提供更容易的并发使用方法，提供了2个重要的概念`goroutine`和`channel`。\n\n**goroutine**来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被`runtime`调度，转移到其他可运行的线程上。\n\n![img](3184f3.jpg)\n\n其实**老调度器**有4个缺点：详见[Scalable Go Scheduler Design Doc](https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!)\n\n1. 创建、销毁、调度G都需要每个M获取锁，这就形成了激烈的锁竞争\n2. M转移G会造成延迟和额外的系统开销。\n3. M中的mcache是用来存放小对象的，mcache和栈都和M关联造成了大量的内存开销和差的局部性\n4. 系统调用导致频繁的线程阻塞和取消阻塞操作增加了系统开销。\n\n所以Go语言在2012年重新设计了调度器方案（[Scalable Go Scheduler Design Doc](https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!)，[设计方案](https://golang.org/s/go11sched)）。\n\n![img](567399-d400f4b192f3dc48.webp)\n\n## 关于GMP模型\n\n### 关于Machine\n \nmachine代表一个线程，每次创建一个M的时候，都会有一个底层线程创建；所有的G任务，最终还是在M上执行。\n\nmachine的字段多达几十个，但将其进行粗劣的分类是可以明确m的具体职责：\n\n1. 特殊g的管理：g0、gsignal、curg\n2. p的管理：p、nextp、oldp\n3. 状态管理：locks、preemptoff、mallocing、throwing、dying、incgo、signalPending、blocked\n4. 锁的管理：lockedg、lockedExt、lockedInt、nextwaitm、waitlock\n5. cgo运行相关：ncgocall、ncgo、cgoCallersUse、cgoCallers\n\n从字段中可以看出，在m层，主要方向有几个关键词：锁、抢占、cgo、g与p的管理、信号。主要原因还是由于m是一个贴近操作系统的结构体，而操作系统的调度的核心问题也是锁、信号，阻塞等。\n\n> 如何解决m和m的绑定问题？\n\n#### 创建Machine\n\n创建m的时机有3类：sysmon抢占线程、templateThread模板线程、运行p。前2者是特殊的线程，不会进入调度系统中。创建m的方法是直接调用`runtime.newm`方法：\n```\nfunc newm(fn func(), _p_ *p) {\n\t// 分配一个m对象\n\tmp := allocm(_p_, fn)\n\t// 设置下一个执行的p\n\tmp.nextp.set(_p_)\n\t// 初始化系统信号拦截\n\tmp.sigmask = initSigmask\n    ... ...\n\tnewm1(mp)\n}\n```\n可以看出在m的创建流程中，具体分为2步：结构体的创建、线程的创建。在`allocm`方法中，核心是需要申请一个m的对象以及相关的g0空间，而针对不同的操作系统，g0的内存空间又区分为是使用系统分配，还是go指定。\n```\nfunc allocm(_p_ *p, fn func()) *m {\n\n    ... ...\n\tmp := new(m)\n\tmp.mstartfn = fn\n\tmcommoninit(mp)\n\n\tif iscgo || GOOS == \"solaris\" || GOOS == \"illumos\" || GOOS == \"windows\" || GOOS == \"plan9\" || GOOS == \"darwin\" {\n\t\tmp.g0 = malg(-1)\n\t} else {\n\t\tmp.g0 = malg(8192 * sys.StackGuardMultiplier)\n\t}\n\tmp.g0.m = mp\n\n\treturn mp\n}\n```\n而在`runtime.newm1`方法中，主要是直接调用`runtime.newosproc`方法，正如其名，就是用于创建一个系统的线程。\n```\nfunc newm1(mp *m) {\n    ... ...\n\tnewosproc(mp)\n    ... ...\n}\n\nfunc newosproc(mp *m) {\n\tstk := unsafe.Pointer(mp.g0.stack.hi)\n    ... ...\n\tvar oset sigset\n\tsigprocmask(_SIG_SETMASK, &sigset_all, &oset)\n\tret := clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))\n\tsigprocmask(_SIG_SETMASK, &oset, nil)\n    ... ...\n}\n```\n\n### 关于Processor\n\n每一个运行的M都必须绑定一个P，就像线程必须在么一个CPU核上执行一样，由P来调度G在M上的运行，P的个数就是GOMAXPROCS（最大256），启动时固定的，一般不修改；\n\nprocessor的字段可以分为以下几类：\n\n1. 内存管理相关：mcache、pcache、mspancache、palloc\n2. 调度计数相关：schedtick、syscalltick、sysmontick\n3. cache相关：deferpool、deferpoolbuf、gFree、sudogcache、sudogbuf\n4. g调度相关：runqhead、runqtail、runq、runnext\n5. 定时器相关：timer0When、timersLock、timers、numTimers、adjustTimers、deletedTimers、\n6. gc相关：gcAssistTime、gcFractionalMarkTime、gcBgMarkWorker、gcMarkWorkerMode、gcMarkWorkerStartTime、gcw、wbBuf、runSafePointFn\n\n这几大方面主要是由于p本身的定位是执行器有关，当执行用户代码时，需要在效率和性能方面做到兼容，\n\np的创建流程代码并不难懂，方法由procresize来执行，也就是平时大家设置GOMAXPROCS计数，其中涉及到扩容和缩容操作。\n\n### 关于Goroutine\n\ngorountine也就是平时的协程，每次go调用的时候，都会创建一个G对象，它包括栈、指令指针以及对于调用goroutines很重要的其它信息\n\ngorountine的字段可以分为以下几类：\n\n1. 上下文信息：startpc、gopc、sigpc、sched、syscallsp、syscallpc、stktopsp、param\n2. 抢占相关：preempt、preemptStop、preemptShrink\n3. 栈相关：stack、stackguard0、stackguard1\n4. defer相关：\\_panic、\\_defer\n5. 锁相关：waiting、timer、selectDone、\n6. 信号相关：sigcode0、sigcode1、sigpc\n\n当然，gorountine不仅仅是上述的字段，还有大量的pprof的计数字段，本次暂时不做讨论。\n\n可以看出，g和m的字段中，都有信号、锁、抢占相关的字段，但是，为什么m中却没有栈信息，难道不需要栈信息？这就是g0协程的重要性，golang中为了做权限隔离，避免用户代码影响runtime的运行，专门抽象了g0协程执行。既然无法向操作系统中通过中断实现内核态切换，就考虑使用特殊协程，这样相关上下文切换逻辑是完全复用，所以，g0是一个只做权限隔离的协程，同时所有m都拥有一个g0。\n\n#### 创建Gorountine\n\n创建gorountine就是平时大家使用的`go func()`关键字。在编译阶段，关键字会变编译为`runtime.newproc`方法，同时会传入参数大小和函数指针fn。然后从堆栈中获取参数并调用`runtime.newproc1`方法。\n```\nfunc newproc(siz int32, fn *funcval) {\n\targp := add(unsafe.Pointer(&fn), sys.PtrSize)\n\tgp := getg()\n\tpc := getcallerpc()\n\tsystemstack(func() {\n\t\tnewproc1(fn, argp, siz, gp, pc)\n\t})\n}\n```\n在`runtime.newproc1`方法中具体可以分为3块逻辑：\n1. gorountine结构体创建\n2. gorountine对象的初始化\n3. 插入调度对象并唤醒p\n\n创建完的gorountine结构体最终会插入p中的runq链表中。\n\n## 调度实现\n\n从m的创建流程中，可以看到`newosproc`方法是第四个参数，也就是系统线程的入口函数。线程创建完成后，操作系统会根据系统调度算法运行线程，`runtime.mstart`也就是线程的初始化方法。\n\n### 线程初始化\n\n`runtime.mstart`方法中，优先将栈的检查地址更新，这是因为如果是操作系统自动生成的堆栈，线程运行前是无法确定的。之后会调用`runtime.mstart1`方法执行进一步的初始化方法。最后，针对特殊的线程（被lockg的线程），会执行`runtime.mexit`方法。\n```\nfunc mstart() {\n\t_g_ := getg()\n\n\tosStack := _g_.stack.lo == 0\n\tif osStack {\n\t\tsize := _g_.stack.hi\n\t\tif size == 0 {\n\t\t\tsize = 8192 * sys.StackGuardMultiplier\n\t\t}\n\t\t_g_.stack.hi = uintptr(noescape(unsafe.Pointer(&size)))\n\t\t_g_.stack.lo = _g_.stack.hi - size + 1024\n\t}\n\t_g_.stackguard0 = _g_.stack.lo + _StackGuard\n\t_g_.stackguard1 = _g_.stackguard0\n\tmstart1()\n\n\tmexit(osStack)\n}\n```\n继续看`runtime.mstart1`方法，也还是一系列的初始化方法：\n1. 保存调用寄存器信息，主要用于当用户g切换至g0时，需要恢复的上下文\n2. 初始化信号处理方法，因为每个线程都需要自己的信号处理g\n3. 执行mstartfn方法，这个方法是针对sysmon这类的特殊线程实现的功能，使当前线程不进入调度循环中。\n\n执行完上述的初始化操作后，当前线程就将`nextp`字段转正进行绑定，并进入`runtime.schedule`方法中调度。\n\n### 线程循环\n\n在调用循环中，存在3个因素影响调度：当前是否需要stw、当前是否获取到g、当前m是否被g绑定。三者中获取g是调度循环的主流程，其他2者也是golang的特殊功能。所以先抽离出获取g的整体流程。\n\n#### 获取Gorountine\n\n在获取gorountine流程中，可以分为3部分：\n1. 若当前p不存在g，或者调度计数满足61次，则从全局中获取g运行\n2. 产生从p本地队列中获取g\n3. 本地和全局都获取不到时，则在`findrunable`方法中阻塞获取g\n\n```\nfunc schedule() {\n    ... ... \ntop:\n\tif gp == nil {\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t\t// We can see gp != nil here even if the M is spinning,\n\t\t// if checkTimers added a local goroutine via goready.\n\t}\n\t// 如果实在没找到，那就强行找一个可用的\n\tif gp == nil {\n\t\tgp, inheritTime = findrunnable() // blocks until work is available\n\t}\n    execute(gp, inheritTime)\n}\n```\n\n##### globrunqget方法\n在从全局队列中获取g时，会从全局队列中获取g，并同时迁移`1/len(allp)`个数的g到本地队列中。\n```\nfunc globrunqget(_p_ *p, max int32) *g {\n\tn := sched.runqsize/gomaxprocs + 1\n\tif n > int32(len(_p_.runq))/2 {\n\t\tn = int32(len(_p_.runq)) / 2\n\t}\n\n\tsched.runqsize -= n\n\n\tgp := sched.runq.pop()\n\tn--\n\tfor ; n > 0; n-- {\n\t\tgp1 := sched.runq.pop()\n\t\trunqput(_p_, gp1, false)\n\t}\n\treturn gp\n}\n```\n\n##### runqget方法\n而在获取本地队列g的时候，优先会尝试获取`runnext`字段的g，在从`runq`中获取头部的g对象。当然由于`runq`是通过循环队列实现，所以gp是通过下标取余获取。\n```\nfunc runqget(_p_ *p) (gp *g, inheritTime bool) {\n\tfor {\n\t\tnext := _p_.runnext\n\t\tif next == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif _p_.runnext.cas(next, 0) {\n\t\t\treturn next.ptr(), true\n\t\t}\n\t}\n\n\tfor {\n\t\th := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with other consumers\n\t\tt := _p_.runqtail\n\t\tif t == h {\n\t\t\treturn nil, false\n\t\t}\n\t\tgp := _p_.runq[h%uint32(len(_p_.runq))].ptr()\n\t\tif atomic.CasRel(&_p_.runqhead, h, h+1) { // cas-release, commits consume\n\t\t\treturn gp, false\n\t\t}\n\t}\n}\n```\n##### findrunnable方法\n\n`findrunnable`方法会不仅仅\n\n## 调度工具\n\n- trace\n- pprof\n\n## 相关主题\n- lock ranking\n\n\n## 相关链接\nhttps://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html\nhttps://www.linuxjournal.com/article/3184\n\n","source":"_posts/golang-gmp.md","raw":"---\ntitle: Golang-GMP模型\ndate: 2020-07-19 18:04:28\ntags:\n---\n\n## 前言\n\n\n## GMP模型\n\n### 关于线程和协程\n\n在计算机操作系统中,轻量级进程（LWP）是一种实现多任务的方法。与普通进程相比，LWP与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源；与线程相比，LWP有它自己的进程标识符，优先级，状态，以及栈和局部存储区，并和其他进程有着父子关系；这是和类Unix操作系统的系统调用vfork()生成的进程一样的。另外，线程既可由应用程序管理，又可由内核管理，而LWP只能由内核管理并像普通进程一样被调度。Linux内核是支持LWP的典型例子。\n\n![img](1767848-9c4b06362907280d.webp)\n\n### Golang中的模型\n\n有2个支持高并发的模型：CSP和Actor（erlang）。Go选择了CSP，Go为了提供更容易的并发使用方法，提供了2个重要的概念`goroutine`和`channel`。\n\n**goroutine**来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被`runtime`调度，转移到其他可运行的线程上。\n\n![img](3184f3.jpg)\n\n其实**老调度器**有4个缺点：详见[Scalable Go Scheduler Design Doc](https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!)\n\n1. 创建、销毁、调度G都需要每个M获取锁，这就形成了激烈的锁竞争\n2. M转移G会造成延迟和额外的系统开销。\n3. M中的mcache是用来存放小对象的，mcache和栈都和M关联造成了大量的内存开销和差的局部性\n4. 系统调用导致频繁的线程阻塞和取消阻塞操作增加了系统开销。\n\n所以Go语言在2012年重新设计了调度器方案（[Scalable Go Scheduler Design Doc](https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!)，[设计方案](https://golang.org/s/go11sched)）。\n\n![img](567399-d400f4b192f3dc48.webp)\n\n## 关于GMP模型\n\n### 关于Machine\n \nmachine代表一个线程，每次创建一个M的时候，都会有一个底层线程创建；所有的G任务，最终还是在M上执行。\n\nmachine的字段多达几十个，但将其进行粗劣的分类是可以明确m的具体职责：\n\n1. 特殊g的管理：g0、gsignal、curg\n2. p的管理：p、nextp、oldp\n3. 状态管理：locks、preemptoff、mallocing、throwing、dying、incgo、signalPending、blocked\n4. 锁的管理：lockedg、lockedExt、lockedInt、nextwaitm、waitlock\n5. cgo运行相关：ncgocall、ncgo、cgoCallersUse、cgoCallers\n\n从字段中可以看出，在m层，主要方向有几个关键词：锁、抢占、cgo、g与p的管理、信号。主要原因还是由于m是一个贴近操作系统的结构体，而操作系统的调度的核心问题也是锁、信号，阻塞等。\n\n> 如何解决m和m的绑定问题？\n\n#### 创建Machine\n\n创建m的时机有3类：sysmon抢占线程、templateThread模板线程、运行p。前2者是特殊的线程，不会进入调度系统中。创建m的方法是直接调用`runtime.newm`方法：\n```\nfunc newm(fn func(), _p_ *p) {\n\t// 分配一个m对象\n\tmp := allocm(_p_, fn)\n\t// 设置下一个执行的p\n\tmp.nextp.set(_p_)\n\t// 初始化系统信号拦截\n\tmp.sigmask = initSigmask\n    ... ...\n\tnewm1(mp)\n}\n```\n可以看出在m的创建流程中，具体分为2步：结构体的创建、线程的创建。在`allocm`方法中，核心是需要申请一个m的对象以及相关的g0空间，而针对不同的操作系统，g0的内存空间又区分为是使用系统分配，还是go指定。\n```\nfunc allocm(_p_ *p, fn func()) *m {\n\n    ... ...\n\tmp := new(m)\n\tmp.mstartfn = fn\n\tmcommoninit(mp)\n\n\tif iscgo || GOOS == \"solaris\" || GOOS == \"illumos\" || GOOS == \"windows\" || GOOS == \"plan9\" || GOOS == \"darwin\" {\n\t\tmp.g0 = malg(-1)\n\t} else {\n\t\tmp.g0 = malg(8192 * sys.StackGuardMultiplier)\n\t}\n\tmp.g0.m = mp\n\n\treturn mp\n}\n```\n而在`runtime.newm1`方法中，主要是直接调用`runtime.newosproc`方法，正如其名，就是用于创建一个系统的线程。\n```\nfunc newm1(mp *m) {\n    ... ...\n\tnewosproc(mp)\n    ... ...\n}\n\nfunc newosproc(mp *m) {\n\tstk := unsafe.Pointer(mp.g0.stack.hi)\n    ... ...\n\tvar oset sigset\n\tsigprocmask(_SIG_SETMASK, &sigset_all, &oset)\n\tret := clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))\n\tsigprocmask(_SIG_SETMASK, &oset, nil)\n    ... ...\n}\n```\n\n### 关于Processor\n\n每一个运行的M都必须绑定一个P，就像线程必须在么一个CPU核上执行一样，由P来调度G在M上的运行，P的个数就是GOMAXPROCS（最大256），启动时固定的，一般不修改；\n\nprocessor的字段可以分为以下几类：\n\n1. 内存管理相关：mcache、pcache、mspancache、palloc\n2. 调度计数相关：schedtick、syscalltick、sysmontick\n3. cache相关：deferpool、deferpoolbuf、gFree、sudogcache、sudogbuf\n4. g调度相关：runqhead、runqtail、runq、runnext\n5. 定时器相关：timer0When、timersLock、timers、numTimers、adjustTimers、deletedTimers、\n6. gc相关：gcAssistTime、gcFractionalMarkTime、gcBgMarkWorker、gcMarkWorkerMode、gcMarkWorkerStartTime、gcw、wbBuf、runSafePointFn\n\n这几大方面主要是由于p本身的定位是执行器有关，当执行用户代码时，需要在效率和性能方面做到兼容，\n\np的创建流程代码并不难懂，方法由procresize来执行，也就是平时大家设置GOMAXPROCS计数，其中涉及到扩容和缩容操作。\n\n### 关于Goroutine\n\ngorountine也就是平时的协程，每次go调用的时候，都会创建一个G对象，它包括栈、指令指针以及对于调用goroutines很重要的其它信息\n\ngorountine的字段可以分为以下几类：\n\n1. 上下文信息：startpc、gopc、sigpc、sched、syscallsp、syscallpc、stktopsp、param\n2. 抢占相关：preempt、preemptStop、preemptShrink\n3. 栈相关：stack、stackguard0、stackguard1\n4. defer相关：\\_panic、\\_defer\n5. 锁相关：waiting、timer、selectDone、\n6. 信号相关：sigcode0、sigcode1、sigpc\n\n当然，gorountine不仅仅是上述的字段，还有大量的pprof的计数字段，本次暂时不做讨论。\n\n可以看出，g和m的字段中，都有信号、锁、抢占相关的字段，但是，为什么m中却没有栈信息，难道不需要栈信息？这就是g0协程的重要性，golang中为了做权限隔离，避免用户代码影响runtime的运行，专门抽象了g0协程执行。既然无法向操作系统中通过中断实现内核态切换，就考虑使用特殊协程，这样相关上下文切换逻辑是完全复用，所以，g0是一个只做权限隔离的协程，同时所有m都拥有一个g0。\n\n#### 创建Gorountine\n\n创建gorountine就是平时大家使用的`go func()`关键字。在编译阶段，关键字会变编译为`runtime.newproc`方法，同时会传入参数大小和函数指针fn。然后从堆栈中获取参数并调用`runtime.newproc1`方法。\n```\nfunc newproc(siz int32, fn *funcval) {\n\targp := add(unsafe.Pointer(&fn), sys.PtrSize)\n\tgp := getg()\n\tpc := getcallerpc()\n\tsystemstack(func() {\n\t\tnewproc1(fn, argp, siz, gp, pc)\n\t})\n}\n```\n在`runtime.newproc1`方法中具体可以分为3块逻辑：\n1. gorountine结构体创建\n2. gorountine对象的初始化\n3. 插入调度对象并唤醒p\n\n创建完的gorountine结构体最终会插入p中的runq链表中。\n\n## 调度实现\n\n从m的创建流程中，可以看到`newosproc`方法是第四个参数，也就是系统线程的入口函数。线程创建完成后，操作系统会根据系统调度算法运行线程，`runtime.mstart`也就是线程的初始化方法。\n\n### 线程初始化\n\n`runtime.mstart`方法中，优先将栈的检查地址更新，这是因为如果是操作系统自动生成的堆栈，线程运行前是无法确定的。之后会调用`runtime.mstart1`方法执行进一步的初始化方法。最后，针对特殊的线程（被lockg的线程），会执行`runtime.mexit`方法。\n```\nfunc mstart() {\n\t_g_ := getg()\n\n\tosStack := _g_.stack.lo == 0\n\tif osStack {\n\t\tsize := _g_.stack.hi\n\t\tif size == 0 {\n\t\t\tsize = 8192 * sys.StackGuardMultiplier\n\t\t}\n\t\t_g_.stack.hi = uintptr(noescape(unsafe.Pointer(&size)))\n\t\t_g_.stack.lo = _g_.stack.hi - size + 1024\n\t}\n\t_g_.stackguard0 = _g_.stack.lo + _StackGuard\n\t_g_.stackguard1 = _g_.stackguard0\n\tmstart1()\n\n\tmexit(osStack)\n}\n```\n继续看`runtime.mstart1`方法，也还是一系列的初始化方法：\n1. 保存调用寄存器信息，主要用于当用户g切换至g0时，需要恢复的上下文\n2. 初始化信号处理方法，因为每个线程都需要自己的信号处理g\n3. 执行mstartfn方法，这个方法是针对sysmon这类的特殊线程实现的功能，使当前线程不进入调度循环中。\n\n执行完上述的初始化操作后，当前线程就将`nextp`字段转正进行绑定，并进入`runtime.schedule`方法中调度。\n\n### 线程循环\n\n在调用循环中，存在3个因素影响调度：当前是否需要stw、当前是否获取到g、当前m是否被g绑定。三者中获取g是调度循环的主流程，其他2者也是golang的特殊功能。所以先抽离出获取g的整体流程。\n\n#### 获取Gorountine\n\n在获取gorountine流程中，可以分为3部分：\n1. 若当前p不存在g，或者调度计数满足61次，则从全局中获取g运行\n2. 产生从p本地队列中获取g\n3. 本地和全局都获取不到时，则在`findrunable`方法中阻塞获取g\n\n```\nfunc schedule() {\n    ... ... \ntop:\n\tif gp == nil {\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t\t// We can see gp != nil here even if the M is spinning,\n\t\t// if checkTimers added a local goroutine via goready.\n\t}\n\t// 如果实在没找到，那就强行找一个可用的\n\tif gp == nil {\n\t\tgp, inheritTime = findrunnable() // blocks until work is available\n\t}\n    execute(gp, inheritTime)\n}\n```\n\n##### globrunqget方法\n在从全局队列中获取g时，会从全局队列中获取g，并同时迁移`1/len(allp)`个数的g到本地队列中。\n```\nfunc globrunqget(_p_ *p, max int32) *g {\n\tn := sched.runqsize/gomaxprocs + 1\n\tif n > int32(len(_p_.runq))/2 {\n\t\tn = int32(len(_p_.runq)) / 2\n\t}\n\n\tsched.runqsize -= n\n\n\tgp := sched.runq.pop()\n\tn--\n\tfor ; n > 0; n-- {\n\t\tgp1 := sched.runq.pop()\n\t\trunqput(_p_, gp1, false)\n\t}\n\treturn gp\n}\n```\n\n##### runqget方法\n而在获取本地队列g的时候，优先会尝试获取`runnext`字段的g，在从`runq`中获取头部的g对象。当然由于`runq`是通过循环队列实现，所以gp是通过下标取余获取。\n```\nfunc runqget(_p_ *p) (gp *g, inheritTime bool) {\n\tfor {\n\t\tnext := _p_.runnext\n\t\tif next == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif _p_.runnext.cas(next, 0) {\n\t\t\treturn next.ptr(), true\n\t\t}\n\t}\n\n\tfor {\n\t\th := atomic.LoadAcq(&_p_.runqhead) // load-acquire, synchronize with other consumers\n\t\tt := _p_.runqtail\n\t\tif t == h {\n\t\t\treturn nil, false\n\t\t}\n\t\tgp := _p_.runq[h%uint32(len(_p_.runq))].ptr()\n\t\tif atomic.CasRel(&_p_.runqhead, h, h+1) { // cas-release, commits consume\n\t\t\treturn gp, false\n\t\t}\n\t}\n}\n```\n##### findrunnable方法\n\n`findrunnable`方法会不仅仅\n\n## 调度工具\n\n- trace\n- pprof\n\n## 相关主题\n- lock ranking\n\n\n## 相关链接\nhttps://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html\nhttps://www.linuxjournal.com/article/3184\n\n","slug":"golang-gmp","published":1,"updated":"2020-07-19T16:34:47.752Z","_id":"ckct7ukps0002jtuy1dks7vob","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h2><h3 id=\"关于线程和协程\"><a href=\"#关于线程和协程\" class=\"headerlink\" title=\"关于线程和协程\"></a>关于线程和协程</h3><p>在计算机操作系统中,轻量级进程（LWP）是一种实现多任务的方法。与普通进程相比，LWP与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源；与线程相比，LWP有它自己的进程标识符，优先级，状态，以及栈和局部存储区，并和其他进程有着父子关系；这是和类Unix操作系统的系统调用vfork()生成的进程一样的。另外，线程既可由应用程序管理，又可由内核管理，而LWP只能由内核管理并像普通进程一样被调度。Linux内核是支持LWP的典型例子。</p>\n<p><img src=\"1767848-9c4b06362907280d.webp\" alt=\"img\"></p>\n<h3 id=\"Golang中的模型\"><a href=\"#Golang中的模型\" class=\"headerlink\" title=\"Golang中的模型\"></a>Golang中的模型</h3><p>有2个支持高并发的模型：CSP和Actor（erlang）。Go选择了CSP，Go为了提供更容易的并发使用方法，提供了2个重要的概念<code>goroutine</code>和<code>channel</code>。</p>\n<p><strong>goroutine</strong>来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被<code>runtime</code>调度，转移到其他可运行的线程上。</p>\n<p><img src=\"3184f3.jpg\" alt=\"img\"></p>\n<p>其实<strong>老调度器</strong>有4个缺点：详见<a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!\" target=\"_blank\" rel=\"noopener\">Scalable Go Scheduler Design Doc</a></p>\n<ol>\n<li>创建、销毁、调度G都需要每个M获取锁，这就形成了激烈的锁竞争</li>\n<li>M转移G会造成延迟和额外的系统开销。</li>\n<li>M中的mcache是用来存放小对象的，mcache和栈都和M关联造成了大量的内存开销和差的局部性</li>\n<li>系统调用导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</li>\n</ol>\n<p>所以Go语言在2012年重新设计了调度器方案（<a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!\" target=\"_blank\" rel=\"noopener\">Scalable Go Scheduler Design Doc</a>，<a href=\"https://golang.org/s/go11sched\" target=\"_blank\" rel=\"noopener\">设计方案</a>）。</p>\n<p><img src=\"567399-d400f4b192f3dc48.webp\" alt=\"img\"></p>\n<h2 id=\"关于GMP模型\"><a href=\"#关于GMP模型\" class=\"headerlink\" title=\"关于GMP模型\"></a>关于GMP模型</h2><h3 id=\"关于Machine\"><a href=\"#关于Machine\" class=\"headerlink\" title=\"关于Machine\"></a>关于Machine</h3><p>machine代表一个线程，每次创建一个M的时候，都会有一个底层线程创建；所有的G任务，最终还是在M上执行。</p>\n<p>machine的字段多达几十个，但将其进行粗劣的分类是可以明确m的具体职责：</p>\n<ol>\n<li>特殊g的管理：g0、gsignal、curg</li>\n<li>p的管理：p、nextp、oldp</li>\n<li>状态管理：locks、preemptoff、mallocing、throwing、dying、incgo、signalPending、blocked</li>\n<li>锁的管理：lockedg、lockedExt、lockedInt、nextwaitm、waitlock</li>\n<li>cgo运行相关：ncgocall、ncgo、cgoCallersUse、cgoCallers</li>\n</ol>\n<p>从字段中可以看出，在m层，主要方向有几个关键词：锁、抢占、cgo、g与p的管理、信号。主要原因还是由于m是一个贴近操作系统的结构体，而操作系统的调度的核心问题也是锁、信号，阻塞等。</p>\n<blockquote>\n<p>如何解决m和m的绑定问题？</p>\n</blockquote>\n<h4 id=\"创建Machine\"><a href=\"#创建Machine\" class=\"headerlink\" title=\"创建Machine\"></a>创建Machine</h4><p>创建m的时机有3类：sysmon抢占线程、templateThread模板线程、运行p。前2者是特殊的线程，不会进入调度系统中。创建m的方法是直接调用<code>runtime.newm</code>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newm(fn func(), _p_ *p) &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 分配一个m对象</span><br><span class=\"line\">\tmp :&#x3D; allocm(_p_, fn)</span><br><span class=\"line\">\t&#x2F;&#x2F; 设置下一个执行的p</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\t&#x2F;&#x2F; 初始化系统信号拦截</span><br><span class=\"line\">\tmp.sigmask &#x3D; initSigmask</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出在m的创建流程中，具体分为2步：结构体的创建、线程的创建。在<code>allocm</code>方法中，核心是需要申请一个m的对象以及相关的g0空间，而针对不同的操作系统，g0的内存空间又区分为是使用系统分配，还是go指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func allocm(_p_ *p, fn func()) *m &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tmp :&#x3D; new(m)</span><br><span class=\"line\">\tmp.mstartfn &#x3D; fn</span><br><span class=\"line\">\tmcommoninit(mp)</span><br><span class=\"line\"></span><br><span class=\"line\">\tif iscgo || GOOS &#x3D;&#x3D; &quot;solaris&quot; || GOOS &#x3D;&#x3D; &quot;illumos&quot; || GOOS &#x3D;&#x3D; &quot;windows&quot; || GOOS &#x3D;&#x3D; &quot;plan9&quot; || GOOS &#x3D;&#x3D; &quot;darwin&quot; &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(-1)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(8192 * sys.StackGuardMultiplier)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp.g0.m &#x3D; mp</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn mp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在<code>runtime.newm1</code>方法中，主要是直接调用<code>runtime.newosproc</code>方法，正如其名，就是用于创建一个系统的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newm1(mp *m) &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tnewosproc(mp)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func newosproc(mp *m) &#123;</span><br><span class=\"line\">\tstk :&#x3D; unsafe.Pointer(mp.g0.stack.hi)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tvar oset sigset</span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;sigset_all, &amp;oset)</span><br><span class=\"line\">\tret :&#x3D; clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))</span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;oset, nil)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于Processor\"><a href=\"#关于Processor\" class=\"headerlink\" title=\"关于Processor\"></a>关于Processor</h3><p>每一个运行的M都必须绑定一个P，就像线程必须在么一个CPU核上执行一样，由P来调度G在M上的运行，P的个数就是GOMAXPROCS（最大256），启动时固定的，一般不修改；</p>\n<p>processor的字段可以分为以下几类：</p>\n<ol>\n<li>内存管理相关：mcache、pcache、mspancache、palloc</li>\n<li>调度计数相关：schedtick、syscalltick、sysmontick</li>\n<li>cache相关：deferpool、deferpoolbuf、gFree、sudogcache、sudogbuf</li>\n<li>g调度相关：runqhead、runqtail、runq、runnext</li>\n<li>定时器相关：timer0When、timersLock、timers、numTimers、adjustTimers、deletedTimers、</li>\n<li>gc相关：gcAssistTime、gcFractionalMarkTime、gcBgMarkWorker、gcMarkWorkerMode、gcMarkWorkerStartTime、gcw、wbBuf、runSafePointFn</li>\n</ol>\n<p>这几大方面主要是由于p本身的定位是执行器有关，当执行用户代码时，需要在效率和性能方面做到兼容，</p>\n<p>p的创建流程代码并不难懂，方法由procresize来执行，也就是平时大家设置GOMAXPROCS计数，其中涉及到扩容和缩容操作。</p>\n<h3 id=\"关于Goroutine\"><a href=\"#关于Goroutine\" class=\"headerlink\" title=\"关于Goroutine\"></a>关于Goroutine</h3><p>gorountine也就是平时的协程，每次go调用的时候，都会创建一个G对象，它包括栈、指令指针以及对于调用goroutines很重要的其它信息</p>\n<p>gorountine的字段可以分为以下几类：</p>\n<ol>\n<li>上下文信息：startpc、gopc、sigpc、sched、syscallsp、syscallpc、stktopsp、param</li>\n<li>抢占相关：preempt、preemptStop、preemptShrink</li>\n<li>栈相关：stack、stackguard0、stackguard1</li>\n<li>defer相关：_panic、_defer</li>\n<li>锁相关：waiting、timer、selectDone、</li>\n<li>信号相关：sigcode0、sigcode1、sigpc</li>\n</ol>\n<p>当然，gorountine不仅仅是上述的字段，还有大量的pprof的计数字段，本次暂时不做讨论。</p>\n<p>可以看出，g和m的字段中，都有信号、锁、抢占相关的字段，但是，为什么m中却没有栈信息，难道不需要栈信息？这就是g0协程的重要性，golang中为了做权限隔离，避免用户代码影响runtime的运行，专门抽象了g0协程执行。既然无法向操作系统中通过中断实现内核态切换，就考虑使用特殊协程，这样相关上下文切换逻辑是完全复用，所以，g0是一个只做权限隔离的协程，同时所有m都拥有一个g0。</p>\n<h4 id=\"创建Gorountine\"><a href=\"#创建Gorountine\" class=\"headerlink\" title=\"创建Gorountine\"></a>创建Gorountine</h4><p>创建gorountine就是平时大家使用的<code>go func()</code>关键字。在编译阶段，关键字会变编译为<code>runtime.newproc</code>方法，同时会传入参数大小和函数指针fn。然后从堆栈中获取参数并调用<code>runtime.newproc1</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newproc(siz int32, fn *funcval) &#123;</span><br><span class=\"line\">\targp :&#x3D; add(unsafe.Pointer(&amp;fn), sys.PtrSize)</span><br><span class=\"line\">\tgp :&#x3D; getg()</span><br><span class=\"line\">\tpc :&#x3D; getcallerpc()</span><br><span class=\"line\">\tsystemstack(func() &#123;</span><br><span class=\"line\">\t\tnewproc1(fn, argp, siz, gp, pc)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>runtime.newproc1</code>方法中具体可以分为3块逻辑：</p>\n<ol>\n<li>gorountine结构体创建</li>\n<li>gorountine对象的初始化</li>\n<li>插入调度对象并唤醒p</li>\n</ol>\n<p>创建完的gorountine结构体最终会插入p中的runq链表中。</p>\n<h2 id=\"调度实现\"><a href=\"#调度实现\" class=\"headerlink\" title=\"调度实现\"></a>调度实现</h2><p>从m的创建流程中，可以看到<code>newosproc</code>方法是第四个参数，也就是系统线程的入口函数。线程创建完成后，操作系统会根据系统调度算法运行线程，<code>runtime.mstart</code>也就是线程的初始化方法。</p>\n<h3 id=\"线程初始化\"><a href=\"#线程初始化\" class=\"headerlink\" title=\"线程初始化\"></a>线程初始化</h3><p><code>runtime.mstart</code>方法中，优先将栈的检查地址更新，这是因为如果是操作系统自动生成的堆栈，线程运行前是无法确定的。之后会调用<code>runtime.mstart1</code>方法执行进一步的初始化方法。最后，针对特殊的线程（被lockg的线程），会执行<code>runtime.mexit</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func mstart() &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tosStack :&#x3D; _g_.stack.lo &#x3D;&#x3D; 0</span><br><span class=\"line\">\tif osStack &#123;</span><br><span class=\"line\">\t\tsize :&#x3D; _g_.stack.hi</span><br><span class=\"line\">\t\tif size &#x3D;&#x3D; 0 &#123;</span><br><span class=\"line\">\t\t\tsize &#x3D; 8192 * sys.StackGuardMultiplier</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_g_.stack.hi &#x3D; uintptr(noescape(unsafe.Pointer(&amp;size)))</span><br><span class=\"line\">\t\t_g_.stack.lo &#x3D; _g_.stack.hi - size + 1024</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_g_.stackguard0 &#x3D; _g_.stack.lo + _StackGuard</span><br><span class=\"line\">\t_g_.stackguard1 &#x3D; _g_.stackguard0</span><br><span class=\"line\">\tmstart1()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmexit(osStack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续看<code>runtime.mstart1</code>方法，也还是一系列的初始化方法：</p>\n<ol>\n<li>保存调用寄存器信息，主要用于当用户g切换至g0时，需要恢复的上下文</li>\n<li>初始化信号处理方法，因为每个线程都需要自己的信号处理g</li>\n<li>执行mstartfn方法，这个方法是针对sysmon这类的特殊线程实现的功能，使当前线程不进入调度循环中。</li>\n</ol>\n<p>执行完上述的初始化操作后，当前线程就将<code>nextp</code>字段转正进行绑定，并进入<code>runtime.schedule</code>方法中调度。</p>\n<h3 id=\"线程循环\"><a href=\"#线程循环\" class=\"headerlink\" title=\"线程循环\"></a>线程循环</h3><p>在调用循环中，存在3个因素影响调度：当前是否需要stw、当前是否获取到g、当前m是否被g绑定。三者中获取g是调度循环的主流程，其他2者也是golang的特殊功能。所以先抽离出获取g的整体流程。</p>\n<h4 id=\"获取Gorountine\"><a href=\"#获取Gorountine\" class=\"headerlink\" title=\"获取Gorountine\"></a>获取Gorountine</h4><p>在获取gorountine流程中，可以分为3部分：</p>\n<ol>\n<li>若当前p不存在g，或者调度计数满足61次，则从全局中获取g运行</li>\n<li>产生从p本地队列中获取g</li>\n<li>本地和全局都获取不到时，则在<code>findrunable</code>方法中阻塞获取g</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func schedule() &#123;</span><br><span class=\"line\">    ... ... </span><br><span class=\"line\">top:</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tif _g_.m.p.ptr().schedtick%61 &#x3D;&#x3D; 0 &amp;&amp; sched.runqsize &gt; 0 &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\tgp &#x3D; globrunqget(_g_.m.p.ptr(), 1)</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tgp, inheritTime &#x3D; runqget(_g_.m.p.ptr())</span><br><span class=\"line\">\t\t&#x2F;&#x2F; We can see gp !&#x3D; nil here even if the M is spinning,</span><br><span class=\"line\">\t\t&#x2F;&#x2F; if checkTimers added a local goroutine via goready.</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; 如果实在没找到，那就强行找一个可用的</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tgp, inheritTime &#x3D; findrunnable() &#x2F;&#x2F; blocks until work is available</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    execute(gp, inheritTime)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"globrunqget方法\"><a href=\"#globrunqget方法\" class=\"headerlink\" title=\"globrunqget方法\"></a>globrunqget方法</h5><p>在从全局队列中获取g时，会从全局队列中获取g，并同时迁移<code>1/len(allp)</code>个数的g到本地队列中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func globrunqget(_p_ *p, max int32) *g &#123;</span><br><span class=\"line\">\tn :&#x3D; sched.runqsize&#x2F;gomaxprocs + 1</span><br><span class=\"line\">\tif n &gt; int32(len(_p_.runq))&#x2F;2 &#123;</span><br><span class=\"line\">\t\tn &#x3D; int32(len(_p_.runq)) &#x2F; 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsched.runqsize -&#x3D; n</span><br><span class=\"line\"></span><br><span class=\"line\">\tgp :&#x3D; sched.runq.pop()</span><br><span class=\"line\">\tn--</span><br><span class=\"line\">\tfor ; n &gt; 0; n-- &#123;</span><br><span class=\"line\">\t\tgp1 :&#x3D; sched.runq.pop()</span><br><span class=\"line\">\t\trunqput(_p_, gp1, false)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn gp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"runqget方法\"><a href=\"#runqget方法\" class=\"headerlink\" title=\"runqget方法\"></a>runqget方法</h5><p>而在获取本地队列g的时候，优先会尝试获取<code>runnext</code>字段的g，在从<code>runq</code>中获取头部的g对象。当然由于<code>runq</code>是通过循环队列实现，所以gp是通过下标取余获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func runqget(_p_ *p) (gp *g, inheritTime bool) &#123;</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tnext :&#x3D; _p_.runnext</span><br><span class=\"line\">\t\tif next &#x3D;&#x3D; 0 &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif _p_.runnext.cas(next, 0) &#123;</span><br><span class=\"line\">\t\t\treturn next.ptr(), true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\th :&#x3D; atomic.LoadAcq(&amp;_p_.runqhead) &#x2F;&#x2F; load-acquire, synchronize with other consumers</span><br><span class=\"line\">\t\tt :&#x3D; _p_.runqtail</span><br><span class=\"line\">\t\tif t &#x3D;&#x3D; h &#123;</span><br><span class=\"line\">\t\t\treturn nil, false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgp :&#x3D; _p_.runq[h%uint32(len(_p_.runq))].ptr()</span><br><span class=\"line\">\t\tif atomic.CasRel(&amp;_p_.runqhead, h, h+1) &#123; &#x2F;&#x2F; cas-release, commits consume</span><br><span class=\"line\">\t\t\treturn gp, false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findrunnable方法\"><a href=\"#findrunnable方法\" class=\"headerlink\" title=\"findrunnable方法\"></a>findrunnable方法</h5><p><code>findrunnable</code>方法会不仅仅</p>\n<h2 id=\"调度工具\"><a href=\"#调度工具\" class=\"headerlink\" title=\"调度工具\"></a>调度工具</h2><ul>\n<li>trace</li>\n<li>pprof</li>\n</ul>\n<h2 id=\"相关主题\"><a href=\"#相关主题\" class=\"headerlink\" title=\"相关主题\"></a>相关主题</h2><ul>\n<li>lock ranking</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html</a><br><a href=\"https://www.linuxjournal.com/article/3184\" target=\"_blank\" rel=\"noopener\">https://www.linuxjournal.com/article/3184</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h2><h3 id=\"关于线程和协程\"><a href=\"#关于线程和协程\" class=\"headerlink\" title=\"关于线程和协程\"></a>关于线程和协程</h3><p>在计算机操作系统中,轻量级进程（LWP）是一种实现多任务的方法。与普通进程相比，LWP与其他进程共享所有（或大部分）它的逻辑地址空间和系统资源；与线程相比，LWP有它自己的进程标识符，优先级，状态，以及栈和局部存储区，并和其他进程有着父子关系；这是和类Unix操作系统的系统调用vfork()生成的进程一样的。另外，线程既可由应用程序管理，又可由内核管理，而LWP只能由内核管理并像普通进程一样被调度。Linux内核是支持LWP的典型例子。</p>\n<p><img src=\"1767848-9c4b06362907280d.webp\" alt=\"img\"></p>\n<h3 id=\"Golang中的模型\"><a href=\"#Golang中的模型\" class=\"headerlink\" title=\"Golang中的模型\"></a>Golang中的模型</h3><p>有2个支持高并发的模型：CSP和Actor（erlang）。Go选择了CSP，Go为了提供更容易的并发使用方法，提供了2个重要的概念<code>goroutine</code>和<code>channel</code>。</p>\n<p><strong>goroutine</strong>来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被<code>runtime</code>调度，转移到其他可运行的线程上。</p>\n<p><img src=\"3184f3.jpg\" alt=\"img\"></p>\n<p>其实<strong>老调度器</strong>有4个缺点：详见<a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!\" target=\"_blank\" rel=\"noopener\">Scalable Go Scheduler Design Doc</a></p>\n<ol>\n<li>创建、销毁、调度G都需要每个M获取锁，这就形成了激烈的锁竞争</li>\n<li>M转移G会造成延迟和额外的系统开销。</li>\n<li>M中的mcache是用来存放小对象的，mcache和栈都和M关联造成了大量的内存开销和差的局部性</li>\n<li>系统调用导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</li>\n</ol>\n<p>所以Go语言在2012年重新设计了调度器方案（<a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit#!\" target=\"_blank\" rel=\"noopener\">Scalable Go Scheduler Design Doc</a>，<a href=\"https://golang.org/s/go11sched\" target=\"_blank\" rel=\"noopener\">设计方案</a>）。</p>\n<p><img src=\"567399-d400f4b192f3dc48.webp\" alt=\"img\"></p>\n<h2 id=\"关于GMP模型\"><a href=\"#关于GMP模型\" class=\"headerlink\" title=\"关于GMP模型\"></a>关于GMP模型</h2><h3 id=\"关于Machine\"><a href=\"#关于Machine\" class=\"headerlink\" title=\"关于Machine\"></a>关于Machine</h3><p>machine代表一个线程，每次创建一个M的时候，都会有一个底层线程创建；所有的G任务，最终还是在M上执行。</p>\n<p>machine的字段多达几十个，但将其进行粗劣的分类是可以明确m的具体职责：</p>\n<ol>\n<li>特殊g的管理：g0、gsignal、curg</li>\n<li>p的管理：p、nextp、oldp</li>\n<li>状态管理：locks、preemptoff、mallocing、throwing、dying、incgo、signalPending、blocked</li>\n<li>锁的管理：lockedg、lockedExt、lockedInt、nextwaitm、waitlock</li>\n<li>cgo运行相关：ncgocall、ncgo、cgoCallersUse、cgoCallers</li>\n</ol>\n<p>从字段中可以看出，在m层，主要方向有几个关键词：锁、抢占、cgo、g与p的管理、信号。主要原因还是由于m是一个贴近操作系统的结构体，而操作系统的调度的核心问题也是锁、信号，阻塞等。</p>\n<blockquote>\n<p>如何解决m和m的绑定问题？</p>\n</blockquote>\n<h4 id=\"创建Machine\"><a href=\"#创建Machine\" class=\"headerlink\" title=\"创建Machine\"></a>创建Machine</h4><p>创建m的时机有3类：sysmon抢占线程、templateThread模板线程、运行p。前2者是特殊的线程，不会进入调度系统中。创建m的方法是直接调用<code>runtime.newm</code>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newm(fn func(), _p_ *p) &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 分配一个m对象</span><br><span class=\"line\">\tmp :&#x3D; allocm(_p_, fn)</span><br><span class=\"line\">\t&#x2F;&#x2F; 设置下一个执行的p</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\t&#x2F;&#x2F; 初始化系统信号拦截</span><br><span class=\"line\">\tmp.sigmask &#x3D; initSigmask</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出在m的创建流程中，具体分为2步：结构体的创建、线程的创建。在<code>allocm</code>方法中，核心是需要申请一个m的对象以及相关的g0空间，而针对不同的操作系统，g0的内存空间又区分为是使用系统分配，还是go指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func allocm(_p_ *p, fn func()) *m &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tmp :&#x3D; new(m)</span><br><span class=\"line\">\tmp.mstartfn &#x3D; fn</span><br><span class=\"line\">\tmcommoninit(mp)</span><br><span class=\"line\"></span><br><span class=\"line\">\tif iscgo || GOOS &#x3D;&#x3D; &quot;solaris&quot; || GOOS &#x3D;&#x3D; &quot;illumos&quot; || GOOS &#x3D;&#x3D; &quot;windows&quot; || GOOS &#x3D;&#x3D; &quot;plan9&quot; || GOOS &#x3D;&#x3D; &quot;darwin&quot; &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(-1)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(8192 * sys.StackGuardMultiplier)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp.g0.m &#x3D; mp</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn mp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在<code>runtime.newm1</code>方法中，主要是直接调用<code>runtime.newosproc</code>方法，正如其名，就是用于创建一个系统的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newm1(mp *m) &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tnewosproc(mp)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func newosproc(mp *m) &#123;</span><br><span class=\"line\">\tstk :&#x3D; unsafe.Pointer(mp.g0.stack.hi)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tvar oset sigset</span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;sigset_all, &amp;oset)</span><br><span class=\"line\">\tret :&#x3D; clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))</span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;oset, nil)</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于Processor\"><a href=\"#关于Processor\" class=\"headerlink\" title=\"关于Processor\"></a>关于Processor</h3><p>每一个运行的M都必须绑定一个P，就像线程必须在么一个CPU核上执行一样，由P来调度G在M上的运行，P的个数就是GOMAXPROCS（最大256），启动时固定的，一般不修改；</p>\n<p>processor的字段可以分为以下几类：</p>\n<ol>\n<li>内存管理相关：mcache、pcache、mspancache、palloc</li>\n<li>调度计数相关：schedtick、syscalltick、sysmontick</li>\n<li>cache相关：deferpool、deferpoolbuf、gFree、sudogcache、sudogbuf</li>\n<li>g调度相关：runqhead、runqtail、runq、runnext</li>\n<li>定时器相关：timer0When、timersLock、timers、numTimers、adjustTimers、deletedTimers、</li>\n<li>gc相关：gcAssistTime、gcFractionalMarkTime、gcBgMarkWorker、gcMarkWorkerMode、gcMarkWorkerStartTime、gcw、wbBuf、runSafePointFn</li>\n</ol>\n<p>这几大方面主要是由于p本身的定位是执行器有关，当执行用户代码时，需要在效率和性能方面做到兼容，</p>\n<p>p的创建流程代码并不难懂，方法由procresize来执行，也就是平时大家设置GOMAXPROCS计数，其中涉及到扩容和缩容操作。</p>\n<h3 id=\"关于Goroutine\"><a href=\"#关于Goroutine\" class=\"headerlink\" title=\"关于Goroutine\"></a>关于Goroutine</h3><p>gorountine也就是平时的协程，每次go调用的时候，都会创建一个G对象，它包括栈、指令指针以及对于调用goroutines很重要的其它信息</p>\n<p>gorountine的字段可以分为以下几类：</p>\n<ol>\n<li>上下文信息：startpc、gopc、sigpc、sched、syscallsp、syscallpc、stktopsp、param</li>\n<li>抢占相关：preempt、preemptStop、preemptShrink</li>\n<li>栈相关：stack、stackguard0、stackguard1</li>\n<li>defer相关：_panic、_defer</li>\n<li>锁相关：waiting、timer、selectDone、</li>\n<li>信号相关：sigcode0、sigcode1、sigpc</li>\n</ol>\n<p>当然，gorountine不仅仅是上述的字段，还有大量的pprof的计数字段，本次暂时不做讨论。</p>\n<p>可以看出，g和m的字段中，都有信号、锁、抢占相关的字段，但是，为什么m中却没有栈信息，难道不需要栈信息？这就是g0协程的重要性，golang中为了做权限隔离，避免用户代码影响runtime的运行，专门抽象了g0协程执行。既然无法向操作系统中通过中断实现内核态切换，就考虑使用特殊协程，这样相关上下文切换逻辑是完全复用，所以，g0是一个只做权限隔离的协程，同时所有m都拥有一个g0。</p>\n<h4 id=\"创建Gorountine\"><a href=\"#创建Gorountine\" class=\"headerlink\" title=\"创建Gorountine\"></a>创建Gorountine</h4><p>创建gorountine就是平时大家使用的<code>go func()</code>关键字。在编译阶段，关键字会变编译为<code>runtime.newproc</code>方法，同时会传入参数大小和函数指针fn。然后从堆栈中获取参数并调用<code>runtime.newproc1</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newproc(siz int32, fn *funcval) &#123;</span><br><span class=\"line\">\targp :&#x3D; add(unsafe.Pointer(&amp;fn), sys.PtrSize)</span><br><span class=\"line\">\tgp :&#x3D; getg()</span><br><span class=\"line\">\tpc :&#x3D; getcallerpc()</span><br><span class=\"line\">\tsystemstack(func() &#123;</span><br><span class=\"line\">\t\tnewproc1(fn, argp, siz, gp, pc)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>runtime.newproc1</code>方法中具体可以分为3块逻辑：</p>\n<ol>\n<li>gorountine结构体创建</li>\n<li>gorountine对象的初始化</li>\n<li>插入调度对象并唤醒p</li>\n</ol>\n<p>创建完的gorountine结构体最终会插入p中的runq链表中。</p>\n<h2 id=\"调度实现\"><a href=\"#调度实现\" class=\"headerlink\" title=\"调度实现\"></a>调度实现</h2><p>从m的创建流程中，可以看到<code>newosproc</code>方法是第四个参数，也就是系统线程的入口函数。线程创建完成后，操作系统会根据系统调度算法运行线程，<code>runtime.mstart</code>也就是线程的初始化方法。</p>\n<h3 id=\"线程初始化\"><a href=\"#线程初始化\" class=\"headerlink\" title=\"线程初始化\"></a>线程初始化</h3><p><code>runtime.mstart</code>方法中，优先将栈的检查地址更新，这是因为如果是操作系统自动生成的堆栈，线程运行前是无法确定的。之后会调用<code>runtime.mstart1</code>方法执行进一步的初始化方法。最后，针对特殊的线程（被lockg的线程），会执行<code>runtime.mexit</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func mstart() &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tosStack :&#x3D; _g_.stack.lo &#x3D;&#x3D; 0</span><br><span class=\"line\">\tif osStack &#123;</span><br><span class=\"line\">\t\tsize :&#x3D; _g_.stack.hi</span><br><span class=\"line\">\t\tif size &#x3D;&#x3D; 0 &#123;</span><br><span class=\"line\">\t\t\tsize &#x3D; 8192 * sys.StackGuardMultiplier</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_g_.stack.hi &#x3D; uintptr(noescape(unsafe.Pointer(&amp;size)))</span><br><span class=\"line\">\t\t_g_.stack.lo &#x3D; _g_.stack.hi - size + 1024</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_g_.stackguard0 &#x3D; _g_.stack.lo + _StackGuard</span><br><span class=\"line\">\t_g_.stackguard1 &#x3D; _g_.stackguard0</span><br><span class=\"line\">\tmstart1()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmexit(osStack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续看<code>runtime.mstart1</code>方法，也还是一系列的初始化方法：</p>\n<ol>\n<li>保存调用寄存器信息，主要用于当用户g切换至g0时，需要恢复的上下文</li>\n<li>初始化信号处理方法，因为每个线程都需要自己的信号处理g</li>\n<li>执行mstartfn方法，这个方法是针对sysmon这类的特殊线程实现的功能，使当前线程不进入调度循环中。</li>\n</ol>\n<p>执行完上述的初始化操作后，当前线程就将<code>nextp</code>字段转正进行绑定，并进入<code>runtime.schedule</code>方法中调度。</p>\n<h3 id=\"线程循环\"><a href=\"#线程循环\" class=\"headerlink\" title=\"线程循环\"></a>线程循环</h3><p>在调用循环中，存在3个因素影响调度：当前是否需要stw、当前是否获取到g、当前m是否被g绑定。三者中获取g是调度循环的主流程，其他2者也是golang的特殊功能。所以先抽离出获取g的整体流程。</p>\n<h4 id=\"获取Gorountine\"><a href=\"#获取Gorountine\" class=\"headerlink\" title=\"获取Gorountine\"></a>获取Gorountine</h4><p>在获取gorountine流程中，可以分为3部分：</p>\n<ol>\n<li>若当前p不存在g，或者调度计数满足61次，则从全局中获取g运行</li>\n<li>产生从p本地队列中获取g</li>\n<li>本地和全局都获取不到时，则在<code>findrunable</code>方法中阻塞获取g</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func schedule() &#123;</span><br><span class=\"line\">    ... ... </span><br><span class=\"line\">top:</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tif _g_.m.p.ptr().schedtick%61 &#x3D;&#x3D; 0 &amp;&amp; sched.runqsize &gt; 0 &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\tgp &#x3D; globrunqget(_g_.m.p.ptr(), 1)</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tgp, inheritTime &#x3D; runqget(_g_.m.p.ptr())</span><br><span class=\"line\">\t\t&#x2F;&#x2F; We can see gp !&#x3D; nil here even if the M is spinning,</span><br><span class=\"line\">\t\t&#x2F;&#x2F; if checkTimers added a local goroutine via goready.</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; 如果实在没找到，那就强行找一个可用的</span><br><span class=\"line\">\tif gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tgp, inheritTime &#x3D; findrunnable() &#x2F;&#x2F; blocks until work is available</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    execute(gp, inheritTime)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"globrunqget方法\"><a href=\"#globrunqget方法\" class=\"headerlink\" title=\"globrunqget方法\"></a>globrunqget方法</h5><p>在从全局队列中获取g时，会从全局队列中获取g，并同时迁移<code>1/len(allp)</code>个数的g到本地队列中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func globrunqget(_p_ *p, max int32) *g &#123;</span><br><span class=\"line\">\tn :&#x3D; sched.runqsize&#x2F;gomaxprocs + 1</span><br><span class=\"line\">\tif n &gt; int32(len(_p_.runq))&#x2F;2 &#123;</span><br><span class=\"line\">\t\tn &#x3D; int32(len(_p_.runq)) &#x2F; 2</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsched.runqsize -&#x3D; n</span><br><span class=\"line\"></span><br><span class=\"line\">\tgp :&#x3D; sched.runq.pop()</span><br><span class=\"line\">\tn--</span><br><span class=\"line\">\tfor ; n &gt; 0; n-- &#123;</span><br><span class=\"line\">\t\tgp1 :&#x3D; sched.runq.pop()</span><br><span class=\"line\">\t\trunqput(_p_, gp1, false)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn gp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"runqget方法\"><a href=\"#runqget方法\" class=\"headerlink\" title=\"runqget方法\"></a>runqget方法</h5><p>而在获取本地队列g的时候，优先会尝试获取<code>runnext</code>字段的g，在从<code>runq</code>中获取头部的g对象。当然由于<code>runq</code>是通过循环队列实现，所以gp是通过下标取余获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func runqget(_p_ *p) (gp *g, inheritTime bool) &#123;</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tnext :&#x3D; _p_.runnext</span><br><span class=\"line\">\t\tif next &#x3D;&#x3D; 0 &#123;</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif _p_.runnext.cas(next, 0) &#123;</span><br><span class=\"line\">\t\t\treturn next.ptr(), true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\th :&#x3D; atomic.LoadAcq(&amp;_p_.runqhead) &#x2F;&#x2F; load-acquire, synchronize with other consumers</span><br><span class=\"line\">\t\tt :&#x3D; _p_.runqtail</span><br><span class=\"line\">\t\tif t &#x3D;&#x3D; h &#123;</span><br><span class=\"line\">\t\t\treturn nil, false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgp :&#x3D; _p_.runq[h%uint32(len(_p_.runq))].ptr()</span><br><span class=\"line\">\t\tif atomic.CasRel(&amp;_p_.runqhead, h, h+1) &#123; &#x2F;&#x2F; cas-release, commits consume</span><br><span class=\"line\">\t\t\treturn gp, false</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findrunnable方法\"><a href=\"#findrunnable方法\" class=\"headerlink\" title=\"findrunnable方法\"></a>findrunnable方法</h5><p><code>findrunnable</code>方法会不仅仅</p>\n<h2 id=\"调度工具\"><a href=\"#调度工具\" class=\"headerlink\" title=\"调度工具\"></a>调度工具</h2><ul>\n<li>trace</li>\n<li>pprof</li>\n</ul>\n<h2 id=\"相关主题\"><a href=\"#相关主题\" class=\"headerlink\" title=\"相关主题\"></a>相关主题</h2><ul>\n<li>lock ranking</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p><a href=\"https://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/cd/E19683-01/806-6867/guide-60747/index.html</a><br><a href=\"https://www.linuxjournal.com/article/3184\" target=\"_blank\" rel=\"noopener\">https://www.linuxjournal.com/article/3184</a></p>\n"},{"title":"Golang调度讲解","date":"2020-07-08T07:38:21.000Z","_content":"\nGolang调度是runtime中的核心部分，要说涉及到的东西，从基本的线程协程切换、GC的STW，到锁的暂停，都有相关涉猎。今天请个假休息一下，有空整理整理最近看的调度知识。\n\n## 调度基本知识\n\n### 进程、线程和协程\n\n进程和线程的区别都不用说了，简单来说就是，最初，大佬们觉得，每个任务肯定都有独立的内存空间、句柄等等等。只要保证程序直接能够不互相干扰就行。\n\n当机器性能不断的提升，程序员们发现，我任务太多了，需要执行很久，但是并不需要那么多的空间。如果照原来的方法每个任务都分配空间就特别耗时和耗资源，于是决定在进程的基础上拆分出线程，你只负责执行任务就行了。\n\n按道理，线程已经足够轻量，大数据时代又来了。现在需要大量的碎片计算，就像请求一个hello world，执行的任务不耗时，但是频繁。这时候的线程切换就是一个问题，主要原因是，线程的切换需要切换至操作系统的内核态，不断地做内存的复制，页表的cache很容易就失效，耗时因此增加。\n\n程序员再次想起，只要尽可能的不做内核态的切换，就可以减少这样的风险。于是出现了用户态的线程，也就是协程。\n\n\n### 并发模型\n\n大家在学习Golang源码中可以顺便思考一下，为什么是GMP模型？这就引出《七周七并发模型》书中的其他的并发模型：\n\n- 通过无变量的函数式编程实现并发，是无锁并发的一种模型；\n- Clojure对于状态和标识的分离，可以轻松实现内存事务模型；\n- Erlang的Actor模型是容错性非常高的分布式并发模型；\n- CSP模型是另一种分布式并发模型，被Go和Clojure采用；\n- GPU的并行计算主要针对数据密集型计算的并行，搞游戏的一定要看；\n- Hadoop和Storm分别适合超大数据量的批处理和流式处理。\n\nCSP（Communicating Sequential Processes）是由Tony Hoare在1978的论文上首次提出的。 它是处理并发编程的一种设计模式或者模型，指导并发程序的设计，提供了一种并发程序可实践的组织方法或者设计范式。通过此方法，可以减少并发程序引入的其它缺点，减少和规避并发程序的常见缺点和bug，并且可以被数学理论所论证。\n\n> 经典名言：Do not communicate by sharing memory; instead, share memory by communicating\n\n该模型主要的最终实现在于golang中的channel和goroutine。\n\n### GMP模型\n\n在golang实现之前，其实解决线程切换开销大的问题可能有各种各样的方式。nginx中通过epollo来进行事件管理，还有python中的yield进行用户态的手动切换。这些都属于非抢占式的，核心问题就是如果中间出现过量的超时操作，很容易就会导致进程阻塞。\n\n而golang的GMP模型中参考操作系统中的线程切换制作了sysmon线程用于做协程的抢占操作。\n\n在GMP模型特殊之处也是在于中间P层的存在，在1.1之前，是不存在P层。这就导致了，G其实是挂载在全局的链表中。每次切换协程都会抢占一个全局锁，于是给GM中增加了一个P层。\n\n### 特殊的线程、协程\n\n在golang中，存在2个特殊的线程：sysmon、templateThread。前者主要用于实现golang的抢占式调度，后者则是作为fork线程时使用的模板线程。\n\n同时还存在一个特殊的协程：signalG，功能也就是用于接收进程的信号。\n\n这3者可以单独讲解。本文主要讲解整体的正常线程调度流程。\n\n## 进程启动\n\n### 最初的入口和空间\n\n首先，golang的启动入口rt0_go（asm_arm64.s文件）。\n\n```\n\tMOVW\tR0, 8(RSP) // argc\n\tMOVD\tR1, 16(RSP) // argv\n\n\t// create istack out of the given (operating system) stack.\n\t// _cgo_init may update stackguard.\n\tMOVD\t$runtime·g0(SB), g\n\tMOVD\tRSP, R7\n\tMOVD\t$(-64*1024)(R7), R0\n\tMOVD\tR0, g_stackguard0(g)\n\tMOVD\tR0, g_stackguard1(g)\n\tMOVD\tR0, (g_stack+stack_lo)(g)\n\tMOVD\tR7, (g_stack+stack_hi)(g)\n\n    ... ...\nnocgo:\n\tBL\truntime·save_g(SB)\n\t// update stackguard after _cgo_init\n\tMOVD\t(g_stack+stack_lo)(g), R0\n\tADD\t$const__StackGuard, R0\n\tMOVD\tR0, g_stackguard0(g)\n\tMOVD\tR0, g_stackguard1(g)\n\n\t// set the per-goroutine and per-mach \"registers\"\n\tMOVD\t$runtime·m0(SB), R0\n\n\t// save m->g0 = g0\n\tMOVD\tg, m_g0(R0)\n\t// save m0 to g0->m\n\tMOVD\tR0, g_m(g)\n\n\tMOVW\t8(RSP), R0\t// copy argc\n\tMOVW\tR0, -8(RSP)\n\tMOVD\t16(RSP), R0\t\t// copy argv\n\tMOVD\tR0, 0(RSP)\n```\n\n这段汇编其实不用特别讨论，主要做的就是初始化的一个流程：  \n1. 赋值stack.lo和stack.hi属性\n2. 保存g0对象\n3. 设置m对象，包括m->g0、g0->m，做一个m0和g0的绑定\n4. 复制argc和argv\n\n以上基本上就是一些属性的赋值，后续就是执行了一系列的初始化函数。\n\n```\n\tBL\truntime·args(SB)\n\tBL\truntime·osinit(SB)\n\tBL\truntime·schedinit(SB)\n```\n\n这3个函数，不是特别影响调度流程，具体功能主要是对一些功能进行初始化，例如内存管理、信号、mp链表、GC等功能的初始化。\n\n在以上部分，现在基本上只存在一个m0代表主线程，一个g0代表主线程中的g0空间，还要一个signalG空间（并不在执行链表中），同时初始化了maxprocs个p，且在m0上面挂载了一个p对象。这时候，需要开始执行main函数，则需要一个新的g来执行方法。\n\n```\n\tMOVD\t$runtime·mainPC(SB), R0\t\t// entry\n\tMOVD\tRSP, R7\n\tMOVD.W\t$0, -8(R7)\n\tMOVD.W\tR0, -8(R7)\n\tMOVD.W\t$0, -8(R7)\n\tMOVD.W\t$0, -8(R7)\n\tMOVD\tR7, RSP\n\tBL\truntime·newproc(SB)\n```\n\n`newproc`方法会将`runtime.main`函数作为入参传入，功能等同于`go runtime.main()`。而`newproc`方法具体功能主要就是创建一个g并插入当前的p中。\n\n到这一步为止，整个进程还是只存在一个线程，但是存在3个g：g0、signalG、mainG。之后，就开始执行一个调度流程。\n\n```\n    BL\truntime·mstart(SB)\n```\n\n### 调度启动流程\n\n这是每个线程进入循环的入口。为什么这么说，代码如下：\n```\nfunc newosproc(mp *m) {\n\t... ...\n\tret := clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))\n```\n这就是创建一个线程的代码，印象中的线程创建是`thread_create`方法，底层最后还是调用的`clone`方法[参考](https://linux.die.net/man/2/clone)，所有golang自行封装了一个方法。而这个调用的最后一个方法就是`mstart`方法。\n\n\n进入`mstart`方法后，核心功能具体可以分为4部分：  \n1. osStack的判断\n2. stackguard的赋值\n3. mstart1的调用\n4. mexit方法，m的退出函数\n\n首先，先确定stackguard的功能，通过汇编指令，我们可以看到每个函数中都能有一段代码：\n```\nTEXT runtime.main(SB) /opt/go/src/runtime/proc.go\n        proc.go:113             0x430690        64488b0c25f8ffffff      mov rcx, qword ptr fs:[0xfffffff8]\n        proc.go:113             0x430699        483b6110                cmp rsp, qword ptr [rcx+0x10]\n        proc.go:113             0x43069d        0f86f9020000            jbe 0x43099c\n=>      proc.go:113             0x4306a3*       4883ec50                sub rsp, 0x50\n        ... ...\n        proc.go:113             0x43099c        e86f8b0200              call $runtime.morestack_noctxt\n        <autogenerated>:1       0x4309a1        e9eafcffff              jmp $runtime.main\n```\n第一行和第二行的具体功能分别是从TLS中获取当前的g对象、得到stackguard属性值。\n这一整段的代码也就是表示如果当前的rsp比stackguard小的话，就认为是需要进行栈扩展。具体的值，也就是stack.lo+_StackGuard(896)。这一段就不具体叙述。\n\n第二个问题是为什么要判断osStack？这就是要知道什么情况下会出现osStack，也就是系统栈空间。核心代码如下：\n```\nfunc allocm(_p_ *p, fn func()) *m {\n    ... ...\n\tif iscgo || GOOS == \"solaris\" || GOOS == \"illumos\" || GOOS == \"windows\" || GOOS == \"plan9\" || GOOS == \"darwin\" {\n\t\tmp.g0 = malg(-1)\n\t} else {\n\t\tmp.g0 = malg(8192 * sys.StackGuardMultiplier)\n\t}\n```\n主要是当创建m的时候，m里面的g0的栈根据不同的系统或者cgo会创建系统的栈空间，否则就会使用heap中的空间。而在`mstart`方法中，判断是否为osStack，主要是需要判断，当前的栈是否可复用，如果是操作系统自动分配的栈是不在heap中的，无法回收管理，所以直接释放，若是在heap中，则需要进行回收操作。\n\n而`mexit`函数，功能主要也是做一系列的变量释放、回收操作。后续会引出相关功能。\n\n之后，方法会进入`mstart1`函数中\n```\nfunc mstart1() {\n\t_g_ := getg()\n\n\tif _g_ != _g_.m.g0 {\n\t\tthrow(\"bad runtime·mstart\")\n\t}\n\n\tsave(getcallerpc(), getcallersp())\n\tasminit()\n\tminit()\n\n\tif _g_.m == &m0 {\n\t\tmstartm0()\n\t}\n\n\tif fn := _g_.m.mstartfn; fn != nil {\n\t\tfn()\n\t}\n\n\tif _g_.m != &m0 {\n\t\tacquirep(_g_.m.nextp.ptr())\n\t\t_g_.m.nextp = 0\n\t}\n\tschedule()\n}\n```\n\n首先，当前方法保存了上一个函数的pc和sp地址，功能也就是为了调用mexit方法，这里不做叙述。再之后就是2个初始化方法，`asminit`方法，在大部分操作系统中是没有函数体的，而`minit`函数中，具体做的事情是信号的初始化，也就是每个m都有自己的一个信号栈。这一部分不在此次学习范围内。\n\n而后续的`mstartm0`函数，功能具体描述大致有2部分：创建扩展的线程、初始化信号回调方法。俩者也就是只会在m0上面执行一次，不在调度功能内，暂时不做过多介绍。\n\n> 问：扩展线程的功能是干嘛的？\n\n再之后就会有`mstartfn`函数的执行，这一个函数具体会存在3种情况：sysmon抢占线程、templateThread模板线程、mspinning自旋方法。前2者在前面也提到过是2个特殊的线程，进入后便会不断的轮询等待。后者的自旋只是对当前的m做了一个自旋的标记。\n\n而后，针对非m0的m要进行一个p的绑定，m0为啥不需要呢？当然是因为m0在之前就已经绑定好了。\n\n### 开始调度循环\n\n题目是调度循环，而代码中其实是没有一个for循环，最后的逻辑是进入了一个execute方法，那具体是如何实现循环？\n\n循环具体涉及到了几个函数的循环：`schedule->execute->goexit->goexit1->goexit0->schedule`\n\n#### Schedule函数\n\n函数的第一段逻辑，主要会判断当前m是否存在绑定的g，如果存在，则暂停当前m，而后执行`lockedg`。Why？这一段不是主流程，稍后再看。\n\n> 什么情况下会从暂停m？\n\n```\n\tif _g_.m.lockedg != 0 {\n\t\tstoplockedm()\n\t\texecute(_g_.m.lockedg.ptr(), false) // Never returns.\n\t}\n```\n\n之后就是`gcwaiting`变量的判断，该变量不为0的情况主要是在GC的STW阶段。如果是STW阶段，则会暂停当前的m，等到startTheWorld时，会将所有的p唤醒。\n```\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n```\n\n下面就是`runSafePointFn`这个名字，主要功能就是在GC前，需要打开所有的p读写屏障。而这个逻辑，就是简单的需要保证每个P都需要执行一遍。\n\n```\n\tif pp.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n```\n\n再之后就是执行当前p上挂载的定时器\n\n```\ncheckTimers(pp, 0)\n```\n\n上述都是一些m特殊的处理流程，等处理完后，就需要开始寻找g来进行执行。\n\n```\n\tif gp == nil && gcBlackenEnabled != 0 {\n\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())\n\t\ttryWakeP = tryWakeP || gp != nil\n\t}\n\tif gp == nil {\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t}\n```\n\n上述代码，基本上也就是3块逻辑：优先执行gc的g、其次查看是否需要获取全局列表、最后查看当前p的列表。\n\n```\n\tif gp.lockedm != 0 {\n\t\t// Hands off own p to the locked m,\n\t\t// then blocks waiting for a new p.\n\t\tstartlockedm(gp)\n\t\tgoto top\n\t}\n\n\texecute(gp, inheritTime)\n```\n\n最后针对绑定的g进行特殊处理。否则就执行`execute`方法\n\n> 会从哪些地方去获取g？优先级是什么？\n\n#### Execute函数\n\n该函数主要功能切换当前上下文至指定的g中，具体源码如下，没有特别的逻辑，都是将g属性初始化一遍。\n\n```\nfunc execute(gp *g, inheritTime bool) {\n\t_g_ := getg()\n\n\t_g_.m.curg = gp\n\tgp.m = _g_.m\n\tcasgstatus(gp, _Grunnable, _Grunning)\n\tgp.waitsince = 0\n\tgp.preempt = false\n\tgp.stackguard0 = gp.stack.lo + _StackGuard\n\tif !inheritTime {\n\t\t_g_.m.p.ptr().schedtick++\n\t}\n\n\tgogo(&gp.sched)\n}\n```\n\n而`gogo`方法是真正在汇编层切换寄存器的逻辑，传入的sched就是这个g的上下文信息，包含4个寄存器信息，代码如下：\n```\nTEXT runtime·gogo(SB), NOSPLIT, $16-8\n\tMOVQ\tbuf+0(FP), BX\t\t// gobuf\n\tMOVQ\tgobuf_g(BX), DX\n\tMOVQ\t0(DX), CX\t\t// make sure g != nil\n\tget_tls(CX)\n\tMOVQ\tDX, g(CX)\t\t// 保存g至tls中\n\t// 恢复sp，ax，dx，bp寄存器\n\tMOVQ\tgobuf_sp(BX), SP\t// restore SP\n\tMOVQ\tgobuf_ret(BX), AX\n\tMOVQ\tgobuf_ctxt(BX), DX\n\tMOVQ\tgobuf_bp(BX), BP\n\t// 清空gobuf\n\tMOVQ\t$0, gobuf_sp(BX)\t// clear to help garbage collector\n\tMOVQ\t$0, gobuf_ret(BX)\n\tMOVQ\t$0, gobuf_ctxt(BX)\n\tMOVQ\t$0, gobuf_bp(BX)\n\tMOVQ\tgobuf_pc(BX), BX\n\tJMP\tBX\n```\n\n#### Goexit函数\n\ngoexit方法是当当前线程执行完毕后执行的析构方法，设置的方法为：\n```\nfunc gostartcallfn(gobuf *gobuf, fv *funcval) {\n    var fn unsafe.Pointer\n    if fv != nil {\n        fn = unsafe.Pointer(fv.fn)\n    } else {\n        fn = unsafe.Pointer(funcPC(nilfunc))\n    }\n    gostartcall(gobuf, fn, unsafe.Pointer(fv))\n}\n\n// adjust Gobuf as if it executed a call to fn with context ctxt\n// and then did an immediate gosave.\nfunc gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) {\n    sp := buf.sp\n    if sys.RegSize > sys.PtrSize {\n        sp -= sys.PtrSize\n        *(*uintptr)(unsafe.Pointer(sp)) = 0\n    }\n    sp -= sys.PtrSize\n    *(*uintptr)(unsafe.Pointer(sp)) = buf.pc // 注意这里，这个，这里的 buf.pc 实际上是 goexit 的 pc\n    buf.sp = sp\n    buf.pc = uintptr(fn)\n    buf.ctxt = ctxt\n}\n```\n\n在 gostartcall 中把 newproc1 时设置到 buf.pc 中的 goexit 的函数地址放到了 goroutine 的栈顶，然后重新设置 buf.pc 为 goroutine 函数的位置。这样做的目的是为了在执行完任何 goroutine 的函数时，通过 RET 指令，都能从栈顶把 sp 保存的 goexit 的指令 pop 到 pc 寄存器，效果相当于任何 goroutine 执行函数执行完之后，都会去执行 runtime.goexit，完成一些清理工作后再进入 schedule。\n\n\n当前流程只剩下`goexit->goexit1->goexit0`，代码还算可读，直接上代码：\n```\nTEXT runtime·goexit(SB),NOSPLIT,$0-0\n\tBYTE\t$0x90\t// NOP\n\tCALL\truntime·goexit1(SB)\t// does not return\n\t// traceback from goexit1 must hit code range of goexit\n\tBYTE\t$0x90\t// NOP\n\n\t... ... \n\n// Finishes execution of the current goroutine.\nfunc goexit1() {\n\tif raceenabled {\n\t\tracegoend()\n\t}\n\tif trace.enabled {\n\t\ttraceGoEnd()\n\t}\n\tmcall(goexit0)\n}\n```\n在代码来看，goexit和goexit1目标只是切换到g0协程中并执行`goexit0`中，第一部分，大部分都是变量清空，并清空当前的g状态置为_Gdead。\n\n```\nfunc goexit0(gp *g) {\n\t_g_ := getg()\n\n\tcasgstatus(gp, _Grunning, _Gdead)\n\tif isSystemGoroutine(gp, false) {\n\t\tatomic.Xadd(&sched.ngsys, -1)\n\t}\n\tgp.m = nil\n\tlocked := gp.lockedm != 0\n\tgp.lockedm = 0\n\t_g_.m.lockedg = 0\n\tgp.preemptStop = false\n\tgp.paniconfault = false\n\tgp._defer = nil // should be true already but just in case.\n\tgp._panic = nil // non-nil for Goexit during panic. points at stack-allocated data.\n\tgp.writebuf = nil\n\tgp.waitreason = 0\n\tgp.param = nil\n\tgp.labels = nil\n\tgp.timer = nil\n\tif gcBlackenEnabled != 0 && gp.gcAssistBytes > 0 {\n\t\tscanCredit := int64(gcController.assistWorkPerByte * float64(gp.gcAssistBytes))\n\t\tatomic.Xaddint64(&gcController.bgScanCredit, scanCredit)\n\t\tgp.gcAssistBytes = 0\n\t}\n\tdropg()\n```\n\n清空完自身的g后，主要就剩下清理其他的信息，例如：写入g的队列中，清空m，进入调度。\n\n```\nfunc goexit0(gp *g) {\n\t... ...\n\tgfput(_g_.m.p.ptr(), gp)\n\tif locked {\n\t\tif GOOS != \"plan9\" { // See golang.org/issue/22227.\n\t\t\tgogo(&_g_.m.g0.sched)\n\t\t} else {\n\t\t\t_g_.m.lockedExt = 0\n\t\t}\n\t}\n\tschedule()\n```\n\n## 待办事项\n- 定时执行逻辑\n- 锁定线程逻辑\n- tryWakeP逻辑\n- findrunnable逻辑\n- mcall、notesleep逻辑\n- inheritTime功能","source":"_posts/golang-dispatch.md","raw":"---\ntitle: Golang调度讲解\ndate: 2020-07-08 15:38:21\ntags:\n---\n\nGolang调度是runtime中的核心部分，要说涉及到的东西，从基本的线程协程切换、GC的STW，到锁的暂停，都有相关涉猎。今天请个假休息一下，有空整理整理最近看的调度知识。\n\n## 调度基本知识\n\n### 进程、线程和协程\n\n进程和线程的区别都不用说了，简单来说就是，最初，大佬们觉得，每个任务肯定都有独立的内存空间、句柄等等等。只要保证程序直接能够不互相干扰就行。\n\n当机器性能不断的提升，程序员们发现，我任务太多了，需要执行很久，但是并不需要那么多的空间。如果照原来的方法每个任务都分配空间就特别耗时和耗资源，于是决定在进程的基础上拆分出线程，你只负责执行任务就行了。\n\n按道理，线程已经足够轻量，大数据时代又来了。现在需要大量的碎片计算，就像请求一个hello world，执行的任务不耗时，但是频繁。这时候的线程切换就是一个问题，主要原因是，线程的切换需要切换至操作系统的内核态，不断地做内存的复制，页表的cache很容易就失效，耗时因此增加。\n\n程序员再次想起，只要尽可能的不做内核态的切换，就可以减少这样的风险。于是出现了用户态的线程，也就是协程。\n\n\n### 并发模型\n\n大家在学习Golang源码中可以顺便思考一下，为什么是GMP模型？这就引出《七周七并发模型》书中的其他的并发模型：\n\n- 通过无变量的函数式编程实现并发，是无锁并发的一种模型；\n- Clojure对于状态和标识的分离，可以轻松实现内存事务模型；\n- Erlang的Actor模型是容错性非常高的分布式并发模型；\n- CSP模型是另一种分布式并发模型，被Go和Clojure采用；\n- GPU的并行计算主要针对数据密集型计算的并行，搞游戏的一定要看；\n- Hadoop和Storm分别适合超大数据量的批处理和流式处理。\n\nCSP（Communicating Sequential Processes）是由Tony Hoare在1978的论文上首次提出的。 它是处理并发编程的一种设计模式或者模型，指导并发程序的设计，提供了一种并发程序可实践的组织方法或者设计范式。通过此方法，可以减少并发程序引入的其它缺点，减少和规避并发程序的常见缺点和bug，并且可以被数学理论所论证。\n\n> 经典名言：Do not communicate by sharing memory; instead, share memory by communicating\n\n该模型主要的最终实现在于golang中的channel和goroutine。\n\n### GMP模型\n\n在golang实现之前，其实解决线程切换开销大的问题可能有各种各样的方式。nginx中通过epollo来进行事件管理，还有python中的yield进行用户态的手动切换。这些都属于非抢占式的，核心问题就是如果中间出现过量的超时操作，很容易就会导致进程阻塞。\n\n而golang的GMP模型中参考操作系统中的线程切换制作了sysmon线程用于做协程的抢占操作。\n\n在GMP模型特殊之处也是在于中间P层的存在，在1.1之前，是不存在P层。这就导致了，G其实是挂载在全局的链表中。每次切换协程都会抢占一个全局锁，于是给GM中增加了一个P层。\n\n### 特殊的线程、协程\n\n在golang中，存在2个特殊的线程：sysmon、templateThread。前者主要用于实现golang的抢占式调度，后者则是作为fork线程时使用的模板线程。\n\n同时还存在一个特殊的协程：signalG，功能也就是用于接收进程的信号。\n\n这3者可以单独讲解。本文主要讲解整体的正常线程调度流程。\n\n## 进程启动\n\n### 最初的入口和空间\n\n首先，golang的启动入口rt0_go（asm_arm64.s文件）。\n\n```\n\tMOVW\tR0, 8(RSP) // argc\n\tMOVD\tR1, 16(RSP) // argv\n\n\t// create istack out of the given (operating system) stack.\n\t// _cgo_init may update stackguard.\n\tMOVD\t$runtime·g0(SB), g\n\tMOVD\tRSP, R7\n\tMOVD\t$(-64*1024)(R7), R0\n\tMOVD\tR0, g_stackguard0(g)\n\tMOVD\tR0, g_stackguard1(g)\n\tMOVD\tR0, (g_stack+stack_lo)(g)\n\tMOVD\tR7, (g_stack+stack_hi)(g)\n\n    ... ...\nnocgo:\n\tBL\truntime·save_g(SB)\n\t// update stackguard after _cgo_init\n\tMOVD\t(g_stack+stack_lo)(g), R0\n\tADD\t$const__StackGuard, R0\n\tMOVD\tR0, g_stackguard0(g)\n\tMOVD\tR0, g_stackguard1(g)\n\n\t// set the per-goroutine and per-mach \"registers\"\n\tMOVD\t$runtime·m0(SB), R0\n\n\t// save m->g0 = g0\n\tMOVD\tg, m_g0(R0)\n\t// save m0 to g0->m\n\tMOVD\tR0, g_m(g)\n\n\tMOVW\t8(RSP), R0\t// copy argc\n\tMOVW\tR0, -8(RSP)\n\tMOVD\t16(RSP), R0\t\t// copy argv\n\tMOVD\tR0, 0(RSP)\n```\n\n这段汇编其实不用特别讨论，主要做的就是初始化的一个流程：  \n1. 赋值stack.lo和stack.hi属性\n2. 保存g0对象\n3. 设置m对象，包括m->g0、g0->m，做一个m0和g0的绑定\n4. 复制argc和argv\n\n以上基本上就是一些属性的赋值，后续就是执行了一系列的初始化函数。\n\n```\n\tBL\truntime·args(SB)\n\tBL\truntime·osinit(SB)\n\tBL\truntime·schedinit(SB)\n```\n\n这3个函数，不是特别影响调度流程，具体功能主要是对一些功能进行初始化，例如内存管理、信号、mp链表、GC等功能的初始化。\n\n在以上部分，现在基本上只存在一个m0代表主线程，一个g0代表主线程中的g0空间，还要一个signalG空间（并不在执行链表中），同时初始化了maxprocs个p，且在m0上面挂载了一个p对象。这时候，需要开始执行main函数，则需要一个新的g来执行方法。\n\n```\n\tMOVD\t$runtime·mainPC(SB), R0\t\t// entry\n\tMOVD\tRSP, R7\n\tMOVD.W\t$0, -8(R7)\n\tMOVD.W\tR0, -8(R7)\n\tMOVD.W\t$0, -8(R7)\n\tMOVD.W\t$0, -8(R7)\n\tMOVD\tR7, RSP\n\tBL\truntime·newproc(SB)\n```\n\n`newproc`方法会将`runtime.main`函数作为入参传入，功能等同于`go runtime.main()`。而`newproc`方法具体功能主要就是创建一个g并插入当前的p中。\n\n到这一步为止，整个进程还是只存在一个线程，但是存在3个g：g0、signalG、mainG。之后，就开始执行一个调度流程。\n\n```\n    BL\truntime·mstart(SB)\n```\n\n### 调度启动流程\n\n这是每个线程进入循环的入口。为什么这么说，代码如下：\n```\nfunc newosproc(mp *m) {\n\t... ...\n\tret := clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))\n```\n这就是创建一个线程的代码，印象中的线程创建是`thread_create`方法，底层最后还是调用的`clone`方法[参考](https://linux.die.net/man/2/clone)，所有golang自行封装了一个方法。而这个调用的最后一个方法就是`mstart`方法。\n\n\n进入`mstart`方法后，核心功能具体可以分为4部分：  \n1. osStack的判断\n2. stackguard的赋值\n3. mstart1的调用\n4. mexit方法，m的退出函数\n\n首先，先确定stackguard的功能，通过汇编指令，我们可以看到每个函数中都能有一段代码：\n```\nTEXT runtime.main(SB) /opt/go/src/runtime/proc.go\n        proc.go:113             0x430690        64488b0c25f8ffffff      mov rcx, qword ptr fs:[0xfffffff8]\n        proc.go:113             0x430699        483b6110                cmp rsp, qword ptr [rcx+0x10]\n        proc.go:113             0x43069d        0f86f9020000            jbe 0x43099c\n=>      proc.go:113             0x4306a3*       4883ec50                sub rsp, 0x50\n        ... ...\n        proc.go:113             0x43099c        e86f8b0200              call $runtime.morestack_noctxt\n        <autogenerated>:1       0x4309a1        e9eafcffff              jmp $runtime.main\n```\n第一行和第二行的具体功能分别是从TLS中获取当前的g对象、得到stackguard属性值。\n这一整段的代码也就是表示如果当前的rsp比stackguard小的话，就认为是需要进行栈扩展。具体的值，也就是stack.lo+_StackGuard(896)。这一段就不具体叙述。\n\n第二个问题是为什么要判断osStack？这就是要知道什么情况下会出现osStack，也就是系统栈空间。核心代码如下：\n```\nfunc allocm(_p_ *p, fn func()) *m {\n    ... ...\n\tif iscgo || GOOS == \"solaris\" || GOOS == \"illumos\" || GOOS == \"windows\" || GOOS == \"plan9\" || GOOS == \"darwin\" {\n\t\tmp.g0 = malg(-1)\n\t} else {\n\t\tmp.g0 = malg(8192 * sys.StackGuardMultiplier)\n\t}\n```\n主要是当创建m的时候，m里面的g0的栈根据不同的系统或者cgo会创建系统的栈空间，否则就会使用heap中的空间。而在`mstart`方法中，判断是否为osStack，主要是需要判断，当前的栈是否可复用，如果是操作系统自动分配的栈是不在heap中的，无法回收管理，所以直接释放，若是在heap中，则需要进行回收操作。\n\n而`mexit`函数，功能主要也是做一系列的变量释放、回收操作。后续会引出相关功能。\n\n之后，方法会进入`mstart1`函数中\n```\nfunc mstart1() {\n\t_g_ := getg()\n\n\tif _g_ != _g_.m.g0 {\n\t\tthrow(\"bad runtime·mstart\")\n\t}\n\n\tsave(getcallerpc(), getcallersp())\n\tasminit()\n\tminit()\n\n\tif _g_.m == &m0 {\n\t\tmstartm0()\n\t}\n\n\tif fn := _g_.m.mstartfn; fn != nil {\n\t\tfn()\n\t}\n\n\tif _g_.m != &m0 {\n\t\tacquirep(_g_.m.nextp.ptr())\n\t\t_g_.m.nextp = 0\n\t}\n\tschedule()\n}\n```\n\n首先，当前方法保存了上一个函数的pc和sp地址，功能也就是为了调用mexit方法，这里不做叙述。再之后就是2个初始化方法，`asminit`方法，在大部分操作系统中是没有函数体的，而`minit`函数中，具体做的事情是信号的初始化，也就是每个m都有自己的一个信号栈。这一部分不在此次学习范围内。\n\n而后续的`mstartm0`函数，功能具体描述大致有2部分：创建扩展的线程、初始化信号回调方法。俩者也就是只会在m0上面执行一次，不在调度功能内，暂时不做过多介绍。\n\n> 问：扩展线程的功能是干嘛的？\n\n再之后就会有`mstartfn`函数的执行，这一个函数具体会存在3种情况：sysmon抢占线程、templateThread模板线程、mspinning自旋方法。前2者在前面也提到过是2个特殊的线程，进入后便会不断的轮询等待。后者的自旋只是对当前的m做了一个自旋的标记。\n\n而后，针对非m0的m要进行一个p的绑定，m0为啥不需要呢？当然是因为m0在之前就已经绑定好了。\n\n### 开始调度循环\n\n题目是调度循环，而代码中其实是没有一个for循环，最后的逻辑是进入了一个execute方法，那具体是如何实现循环？\n\n循环具体涉及到了几个函数的循环：`schedule->execute->goexit->goexit1->goexit0->schedule`\n\n#### Schedule函数\n\n函数的第一段逻辑，主要会判断当前m是否存在绑定的g，如果存在，则暂停当前m，而后执行`lockedg`。Why？这一段不是主流程，稍后再看。\n\n> 什么情况下会从暂停m？\n\n```\n\tif _g_.m.lockedg != 0 {\n\t\tstoplockedm()\n\t\texecute(_g_.m.lockedg.ptr(), false) // Never returns.\n\t}\n```\n\n之后就是`gcwaiting`变量的判断，该变量不为0的情况主要是在GC的STW阶段。如果是STW阶段，则会暂停当前的m，等到startTheWorld时，会将所有的p唤醒。\n```\n\tif sched.gcwaiting != 0 {\n\t\tgcstopm()\n\t\tgoto top\n\t}\n```\n\n下面就是`runSafePointFn`这个名字，主要功能就是在GC前，需要打开所有的p读写屏障。而这个逻辑，就是简单的需要保证每个P都需要执行一遍。\n\n```\n\tif pp.runSafePointFn != 0 {\n\t\trunSafePointFn()\n\t}\n```\n\n再之后就是执行当前p上挂载的定时器\n\n```\ncheckTimers(pp, 0)\n```\n\n上述都是一些m特殊的处理流程，等处理完后，就需要开始寻找g来进行执行。\n\n```\n\tif gp == nil && gcBlackenEnabled != 0 {\n\t\tgp = gcController.findRunnableGCWorker(_g_.m.p.ptr())\n\t\ttryWakeP = tryWakeP || gp != nil\n\t}\n\tif gp == nil {\n\t\tif _g_.m.p.ptr().schedtick%61 == 0 && sched.runqsize > 0 {\n\t\t\tlock(&sched.lock)\n\t\t\tgp = globrunqget(_g_.m.p.ptr(), 1)\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t}\n\tif gp == nil {\n\t\tgp, inheritTime = runqget(_g_.m.p.ptr())\n\t}\n```\n\n上述代码，基本上也就是3块逻辑：优先执行gc的g、其次查看是否需要获取全局列表、最后查看当前p的列表。\n\n```\n\tif gp.lockedm != 0 {\n\t\t// Hands off own p to the locked m,\n\t\t// then blocks waiting for a new p.\n\t\tstartlockedm(gp)\n\t\tgoto top\n\t}\n\n\texecute(gp, inheritTime)\n```\n\n最后针对绑定的g进行特殊处理。否则就执行`execute`方法\n\n> 会从哪些地方去获取g？优先级是什么？\n\n#### Execute函数\n\n该函数主要功能切换当前上下文至指定的g中，具体源码如下，没有特别的逻辑，都是将g属性初始化一遍。\n\n```\nfunc execute(gp *g, inheritTime bool) {\n\t_g_ := getg()\n\n\t_g_.m.curg = gp\n\tgp.m = _g_.m\n\tcasgstatus(gp, _Grunnable, _Grunning)\n\tgp.waitsince = 0\n\tgp.preempt = false\n\tgp.stackguard0 = gp.stack.lo + _StackGuard\n\tif !inheritTime {\n\t\t_g_.m.p.ptr().schedtick++\n\t}\n\n\tgogo(&gp.sched)\n}\n```\n\n而`gogo`方法是真正在汇编层切换寄存器的逻辑，传入的sched就是这个g的上下文信息，包含4个寄存器信息，代码如下：\n```\nTEXT runtime·gogo(SB), NOSPLIT, $16-8\n\tMOVQ\tbuf+0(FP), BX\t\t// gobuf\n\tMOVQ\tgobuf_g(BX), DX\n\tMOVQ\t0(DX), CX\t\t// make sure g != nil\n\tget_tls(CX)\n\tMOVQ\tDX, g(CX)\t\t// 保存g至tls中\n\t// 恢复sp，ax，dx，bp寄存器\n\tMOVQ\tgobuf_sp(BX), SP\t// restore SP\n\tMOVQ\tgobuf_ret(BX), AX\n\tMOVQ\tgobuf_ctxt(BX), DX\n\tMOVQ\tgobuf_bp(BX), BP\n\t// 清空gobuf\n\tMOVQ\t$0, gobuf_sp(BX)\t// clear to help garbage collector\n\tMOVQ\t$0, gobuf_ret(BX)\n\tMOVQ\t$0, gobuf_ctxt(BX)\n\tMOVQ\t$0, gobuf_bp(BX)\n\tMOVQ\tgobuf_pc(BX), BX\n\tJMP\tBX\n```\n\n#### Goexit函数\n\ngoexit方法是当当前线程执行完毕后执行的析构方法，设置的方法为：\n```\nfunc gostartcallfn(gobuf *gobuf, fv *funcval) {\n    var fn unsafe.Pointer\n    if fv != nil {\n        fn = unsafe.Pointer(fv.fn)\n    } else {\n        fn = unsafe.Pointer(funcPC(nilfunc))\n    }\n    gostartcall(gobuf, fn, unsafe.Pointer(fv))\n}\n\n// adjust Gobuf as if it executed a call to fn with context ctxt\n// and then did an immediate gosave.\nfunc gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) {\n    sp := buf.sp\n    if sys.RegSize > sys.PtrSize {\n        sp -= sys.PtrSize\n        *(*uintptr)(unsafe.Pointer(sp)) = 0\n    }\n    sp -= sys.PtrSize\n    *(*uintptr)(unsafe.Pointer(sp)) = buf.pc // 注意这里，这个，这里的 buf.pc 实际上是 goexit 的 pc\n    buf.sp = sp\n    buf.pc = uintptr(fn)\n    buf.ctxt = ctxt\n}\n```\n\n在 gostartcall 中把 newproc1 时设置到 buf.pc 中的 goexit 的函数地址放到了 goroutine 的栈顶，然后重新设置 buf.pc 为 goroutine 函数的位置。这样做的目的是为了在执行完任何 goroutine 的函数时，通过 RET 指令，都能从栈顶把 sp 保存的 goexit 的指令 pop 到 pc 寄存器，效果相当于任何 goroutine 执行函数执行完之后，都会去执行 runtime.goexit，完成一些清理工作后再进入 schedule。\n\n\n当前流程只剩下`goexit->goexit1->goexit0`，代码还算可读，直接上代码：\n```\nTEXT runtime·goexit(SB),NOSPLIT,$0-0\n\tBYTE\t$0x90\t// NOP\n\tCALL\truntime·goexit1(SB)\t// does not return\n\t// traceback from goexit1 must hit code range of goexit\n\tBYTE\t$0x90\t// NOP\n\n\t... ... \n\n// Finishes execution of the current goroutine.\nfunc goexit1() {\n\tif raceenabled {\n\t\tracegoend()\n\t}\n\tif trace.enabled {\n\t\ttraceGoEnd()\n\t}\n\tmcall(goexit0)\n}\n```\n在代码来看，goexit和goexit1目标只是切换到g0协程中并执行`goexit0`中，第一部分，大部分都是变量清空，并清空当前的g状态置为_Gdead。\n\n```\nfunc goexit0(gp *g) {\n\t_g_ := getg()\n\n\tcasgstatus(gp, _Grunning, _Gdead)\n\tif isSystemGoroutine(gp, false) {\n\t\tatomic.Xadd(&sched.ngsys, -1)\n\t}\n\tgp.m = nil\n\tlocked := gp.lockedm != 0\n\tgp.lockedm = 0\n\t_g_.m.lockedg = 0\n\tgp.preemptStop = false\n\tgp.paniconfault = false\n\tgp._defer = nil // should be true already but just in case.\n\tgp._panic = nil // non-nil for Goexit during panic. points at stack-allocated data.\n\tgp.writebuf = nil\n\tgp.waitreason = 0\n\tgp.param = nil\n\tgp.labels = nil\n\tgp.timer = nil\n\tif gcBlackenEnabled != 0 && gp.gcAssistBytes > 0 {\n\t\tscanCredit := int64(gcController.assistWorkPerByte * float64(gp.gcAssistBytes))\n\t\tatomic.Xaddint64(&gcController.bgScanCredit, scanCredit)\n\t\tgp.gcAssistBytes = 0\n\t}\n\tdropg()\n```\n\n清空完自身的g后，主要就剩下清理其他的信息，例如：写入g的队列中，清空m，进入调度。\n\n```\nfunc goexit0(gp *g) {\n\t... ...\n\tgfput(_g_.m.p.ptr(), gp)\n\tif locked {\n\t\tif GOOS != \"plan9\" { // See golang.org/issue/22227.\n\t\t\tgogo(&_g_.m.g0.sched)\n\t\t} else {\n\t\t\t_g_.m.lockedExt = 0\n\t\t}\n\t}\n\tschedule()\n```\n\n## 待办事项\n- 定时执行逻辑\n- 锁定线程逻辑\n- tryWakeP逻辑\n- findrunnable逻辑\n- mcall、notesleep逻辑\n- inheritTime功能","slug":"golang-dispatch","published":1,"updated":"2020-07-12T15:51:12.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckct7ukqi0003jtuy81kn15mj","content":"<p>Golang调度是runtime中的核心部分，要说涉及到的东西，从基本的线程协程切换、GC的STW，到锁的暂停，都有相关涉猎。今天请个假休息一下，有空整理整理最近看的调度知识。</p>\n<h2 id=\"调度基本知识\"><a href=\"#调度基本知识\" class=\"headerlink\" title=\"调度基本知识\"></a>调度基本知识</h2><h3 id=\"进程、线程和协程\"><a href=\"#进程、线程和协程\" class=\"headerlink\" title=\"进程、线程和协程\"></a>进程、线程和协程</h3><p>进程和线程的区别都不用说了，简单来说就是，最初，大佬们觉得，每个任务肯定都有独立的内存空间、句柄等等等。只要保证程序直接能够不互相干扰就行。</p>\n<p>当机器性能不断的提升，程序员们发现，我任务太多了，需要执行很久，但是并不需要那么多的空间。如果照原来的方法每个任务都分配空间就特别耗时和耗资源，于是决定在进程的基础上拆分出线程，你只负责执行任务就行了。</p>\n<p>按道理，线程已经足够轻量，大数据时代又来了。现在需要大量的碎片计算，就像请求一个hello world，执行的任务不耗时，但是频繁。这时候的线程切换就是一个问题，主要原因是，线程的切换需要切换至操作系统的内核态，不断地做内存的复制，页表的cache很容易就失效，耗时因此增加。</p>\n<p>程序员再次想起，只要尽可能的不做内核态的切换，就可以减少这样的风险。于是出现了用户态的线程，也就是协程。</p>\n<h3 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h3><p>大家在学习Golang源码中可以顺便思考一下，为什么是GMP模型？这就引出《七周七并发模型》书中的其他的并发模型：</p>\n<ul>\n<li>通过无变量的函数式编程实现并发，是无锁并发的一种模型；</li>\n<li>Clojure对于状态和标识的分离，可以轻松实现内存事务模型；</li>\n<li>Erlang的Actor模型是容错性非常高的分布式并发模型；</li>\n<li>CSP模型是另一种分布式并发模型，被Go和Clojure采用；</li>\n<li>GPU的并行计算主要针对数据密集型计算的并行，搞游戏的一定要看；</li>\n<li>Hadoop和Storm分别适合超大数据量的批处理和流式处理。</li>\n</ul>\n<p>CSP（Communicating Sequential Processes）是由Tony Hoare在1978的论文上首次提出的。 它是处理并发编程的一种设计模式或者模型，指导并发程序的设计，提供了一种并发程序可实践的组织方法或者设计范式。通过此方法，可以减少并发程序引入的其它缺点，减少和规避并发程序的常见缺点和bug，并且可以被数学理论所论证。</p>\n<blockquote>\n<p>经典名言：Do not communicate by sharing memory; instead, share memory by communicating</p>\n</blockquote>\n<p>该模型主要的最终实现在于golang中的channel和goroutine。</p>\n<h3 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h3><p>在golang实现之前，其实解决线程切换开销大的问题可能有各种各样的方式。nginx中通过epollo来进行事件管理，还有python中的yield进行用户态的手动切换。这些都属于非抢占式的，核心问题就是如果中间出现过量的超时操作，很容易就会导致进程阻塞。</p>\n<p>而golang的GMP模型中参考操作系统中的线程切换制作了sysmon线程用于做协程的抢占操作。</p>\n<p>在GMP模型特殊之处也是在于中间P层的存在，在1.1之前，是不存在P层。这就导致了，G其实是挂载在全局的链表中。每次切换协程都会抢占一个全局锁，于是给GM中增加了一个P层。</p>\n<h3 id=\"特殊的线程、协程\"><a href=\"#特殊的线程、协程\" class=\"headerlink\" title=\"特殊的线程、协程\"></a>特殊的线程、协程</h3><p>在golang中，存在2个特殊的线程：sysmon、templateThread。前者主要用于实现golang的抢占式调度，后者则是作为fork线程时使用的模板线程。</p>\n<p>同时还存在一个特殊的协程：signalG，功能也就是用于接收进程的信号。</p>\n<p>这3者可以单独讲解。本文主要讲解整体的正常线程调度流程。</p>\n<h2 id=\"进程启动\"><a href=\"#进程启动\" class=\"headerlink\" title=\"进程启动\"></a>进程启动</h2><h3 id=\"最初的入口和空间\"><a href=\"#最初的入口和空间\" class=\"headerlink\" title=\"最初的入口和空间\"></a>最初的入口和空间</h3><p>首先，golang的启动入口rt0_go（asm_arm64.s文件）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tMOVW\tR0, 8(RSP) &#x2F;&#x2F; argc</span><br><span class=\"line\">\tMOVD\tR1, 16(RSP) &#x2F;&#x2F; argv</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; create istack out of the given (operating system) stack.</span><br><span class=\"line\">\t&#x2F;&#x2F; _cgo_init may update stackguard.</span><br><span class=\"line\">\tMOVD\t$runtime·g0(SB), g</span><br><span class=\"line\">\tMOVD\tRSP, R7</span><br><span class=\"line\">\tMOVD\t$(-64*1024)(R7), R0</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard0(g)</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard1(g)</span><br><span class=\"line\">\tMOVD\tR0, (g_stack+stack_lo)(g)</span><br><span class=\"line\">\tMOVD\tR7, (g_stack+stack_hi)(g)</span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">nocgo:</span><br><span class=\"line\">\tBL\truntime·save_g(SB)</span><br><span class=\"line\">\t&#x2F;&#x2F; update stackguard after _cgo_init</span><br><span class=\"line\">\tMOVD\t(g_stack+stack_lo)(g), R0</span><br><span class=\"line\">\tADD\t$const__StackGuard, R0</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard0(g)</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard1(g)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; set the per-goroutine and per-mach &quot;registers&quot;</span><br><span class=\"line\">\tMOVD\t$runtime·m0(SB), R0</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; save m-&gt;g0 &#x3D; g0</span><br><span class=\"line\">\tMOVD\tg, m_g0(R0)</span><br><span class=\"line\">\t&#x2F;&#x2F; save m0 to g0-&gt;m</span><br><span class=\"line\">\tMOVD\tR0, g_m(g)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVW\t8(RSP), R0\t&#x2F;&#x2F; copy argc</span><br><span class=\"line\">\tMOVW\tR0, -8(RSP)</span><br><span class=\"line\">\tMOVD\t16(RSP), R0\t\t&#x2F;&#x2F; copy argv</span><br><span class=\"line\">\tMOVD\tR0, 0(RSP)</span><br></pre></td></tr></table></figure>\n\n<p>这段汇编其实不用特别讨论，主要做的就是初始化的一个流程：  </p>\n<ol>\n<li>赋值stack.lo和stack.hi属性</li>\n<li>保存g0对象</li>\n<li>设置m对象，包括m-&gt;g0、g0-&gt;m，做一个m0和g0的绑定</li>\n<li>复制argc和argv</li>\n</ol>\n<p>以上基本上就是一些属性的赋值，后续就是执行了一系列的初始化函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BL\truntime·args(SB)</span><br><span class=\"line\">BL\truntime·osinit(SB)</span><br><span class=\"line\">BL\truntime·schedinit(SB)</span><br></pre></td></tr></table></figure>\n\n<p>这3个函数，不是特别影响调度流程，具体功能主要是对一些功能进行初始化，例如内存管理、信号、mp链表、GC等功能的初始化。</p>\n<p>在以上部分，现在基本上只存在一个m0代表主线程，一个g0代表主线程中的g0空间，还要一个signalG空间（并不在执行链表中），同时初始化了maxprocs个p，且在m0上面挂载了一个p对象。这时候，需要开始执行main函数，则需要一个新的g来执行方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVD\t$runtime·mainPC(SB), R0\t\t&#x2F;&#x2F; entry</span><br><span class=\"line\">MOVD\tRSP, R7</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD.W\tR0, -8(R7)</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD\tR7, RSP</span><br><span class=\"line\">BL\truntime·newproc(SB)</span><br></pre></td></tr></table></figure>\n\n<p><code>newproc</code>方法会将<code>runtime.main</code>函数作为入参传入，功能等同于<code>go runtime.main()</code>。而<code>newproc</code>方法具体功能主要就是创建一个g并插入当前的p中。</p>\n<p>到这一步为止，整个进程还是只存在一个线程，但是存在3个g：g0、signalG、mainG。之后，就开始执行一个调度流程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BL\truntime·mstart(SB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调度启动流程\"><a href=\"#调度启动流程\" class=\"headerlink\" title=\"调度启动流程\"></a>调度启动流程</h3><p>这是每个线程进入循环的入口。为什么这么说，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newosproc(mp *m) &#123;</span><br><span class=\"line\">\t... ...</span><br><span class=\"line\">\tret :&#x3D; clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))</span><br></pre></td></tr></table></figure>\n<p>这就是创建一个线程的代码，印象中的线程创建是<code>thread_create</code>方法，底层最后还是调用的<code>clone</code>方法<a href=\"https://linux.die.net/man/2/clone\" target=\"_blank\" rel=\"noopener\">参考</a>，所有golang自行封装了一个方法。而这个调用的最后一个方法就是<code>mstart</code>方法。</p>\n<p>进入<code>mstart</code>方法后，核心功能具体可以分为4部分：  </p>\n<ol>\n<li>osStack的判断</li>\n<li>stackguard的赋值</li>\n<li>mstart1的调用</li>\n<li>mexit方法，m的退出函数</li>\n</ol>\n<p>首先，先确定stackguard的功能，通过汇编指令，我们可以看到每个函数中都能有一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime.main(SB) &#x2F;opt&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go</span><br><span class=\"line\">        proc.go:113             0x430690        64488b0c25f8ffffff      mov rcx, qword ptr fs:[0xfffffff8]</span><br><span class=\"line\">        proc.go:113             0x430699        483b6110                cmp rsp, qword ptr [rcx+0x10]</span><br><span class=\"line\">        proc.go:113             0x43069d        0f86f9020000            jbe 0x43099c</span><br><span class=\"line\">&#x3D;&gt;      proc.go:113             0x4306a3*       4883ec50                sub rsp, 0x50</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        proc.go:113             0x43099c        e86f8b0200              call $runtime.morestack_noctxt</span><br><span class=\"line\">        &lt;autogenerated&gt;:1       0x4309a1        e9eafcffff              jmp $runtime.main</span><br></pre></td></tr></table></figure>\n<p>第一行和第二行的具体功能分别是从TLS中获取当前的g对象、得到stackguard属性值。<br>这一整段的代码也就是表示如果当前的rsp比stackguard小的话，就认为是需要进行栈扩展。具体的值，也就是stack.lo+_StackGuard(896)。这一段就不具体叙述。</p>\n<p>第二个问题是为什么要判断osStack？这就是要知道什么情况下会出现osStack，也就是系统栈空间。核心代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func allocm(_p_ *p, fn func()) *m &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tif iscgo || GOOS &#x3D;&#x3D; &quot;solaris&quot; || GOOS &#x3D;&#x3D; &quot;illumos&quot; || GOOS &#x3D;&#x3D; &quot;windows&quot; || GOOS &#x3D;&#x3D; &quot;plan9&quot; || GOOS &#x3D;&#x3D; &quot;darwin&quot; &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(-1)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(8192 * sys.StackGuardMultiplier)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>主要是当创建m的时候，m里面的g0的栈根据不同的系统或者cgo会创建系统的栈空间，否则就会使用heap中的空间。而在<code>mstart</code>方法中，判断是否为osStack，主要是需要判断，当前的栈是否可复用，如果是操作系统自动分配的栈是不在heap中的，无法回收管理，所以直接释放，若是在heap中，则需要进行回收操作。</p>\n<p>而<code>mexit</code>函数，功能主要也是做一系列的变量释放、回收操作。后续会引出相关功能。</p>\n<p>之后，方法会进入<code>mstart1</code>函数中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func mstart1() &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_ !&#x3D; _g_.m.g0 &#123;</span><br><span class=\"line\">\t\tthrow(&quot;bad runtime·mstart&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsave(getcallerpc(), getcallersp())</span><br><span class=\"line\">\tasminit()</span><br><span class=\"line\">\tminit()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_.m &#x3D;&#x3D; &amp;m0 &#123;</span><br><span class=\"line\">\t\tmstartm0()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif fn :&#x3D; _g_.m.mstartfn; fn !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfn()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_.m !&#x3D; &amp;m0 &#123;</span><br><span class=\"line\">\t\tacquirep(_g_.m.nextp.ptr())</span><br><span class=\"line\">\t\t_g_.m.nextp &#x3D; 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，当前方法保存了上一个函数的pc和sp地址，功能也就是为了调用mexit方法，这里不做叙述。再之后就是2个初始化方法，<code>asminit</code>方法，在大部分操作系统中是没有函数体的，而<code>minit</code>函数中，具体做的事情是信号的初始化，也就是每个m都有自己的一个信号栈。这一部分不在此次学习范围内。</p>\n<p>而后续的<code>mstartm0</code>函数，功能具体描述大致有2部分：创建扩展的线程、初始化信号回调方法。俩者也就是只会在m0上面执行一次，不在调度功能内，暂时不做过多介绍。</p>\n<blockquote>\n<p>问：扩展线程的功能是干嘛的？</p>\n</blockquote>\n<p>再之后就会有<code>mstartfn</code>函数的执行，这一个函数具体会存在3种情况：sysmon抢占线程、templateThread模板线程、mspinning自旋方法。前2者在前面也提到过是2个特殊的线程，进入后便会不断的轮询等待。后者的自旋只是对当前的m做了一个自旋的标记。</p>\n<p>而后，针对非m0的m要进行一个p的绑定，m0为啥不需要呢？当然是因为m0在之前就已经绑定好了。</p>\n<h3 id=\"开始调度循环\"><a href=\"#开始调度循环\" class=\"headerlink\" title=\"开始调度循环\"></a>开始调度循环</h3><p>题目是调度循环，而代码中其实是没有一个for循环，最后的逻辑是进入了一个execute方法，那具体是如何实现循环？</p>\n<p>循环具体涉及到了几个函数的循环：<code>schedule-&gt;execute-&gt;goexit-&gt;goexit1-&gt;goexit0-&gt;schedule</code></p>\n<h4 id=\"Schedule函数\"><a href=\"#Schedule函数\" class=\"headerlink\" title=\"Schedule函数\"></a>Schedule函数</h4><p>函数的第一段逻辑，主要会判断当前m是否存在绑定的g，如果存在，则暂停当前m，而后执行<code>lockedg</code>。Why？这一段不是主流程，稍后再看。</p>\n<blockquote>\n<p>什么情况下会从暂停m？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if _g_.m.lockedg !&#x3D; 0 &#123;</span><br><span class=\"line\">\tstoplockedm()</span><br><span class=\"line\">\texecute(_g_.m.lockedg.ptr(), false) &#x2F;&#x2F; Never returns.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后就是<code>gcwaiting</code>变量的判断，该变量不为0的情况主要是在GC的STW阶段。如果是STW阶段，则会暂停当前的m，等到startTheWorld时，会将所有的p唤醒。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if sched.gcwaiting !&#x3D; 0 &#123;</span><br><span class=\"line\">\tgcstopm()</span><br><span class=\"line\">\tgoto top</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面就是<code>runSafePointFn</code>这个名字，主要功能就是在GC前，需要打开所有的p读写屏障。而这个逻辑，就是简单的需要保证每个P都需要执行一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if pp.runSafePointFn !&#x3D; 0 &#123;</span><br><span class=\"line\">\trunSafePointFn()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再之后就是执行当前p上挂载的定时器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkTimers(pp, 0)</span><br></pre></td></tr></table></figure>\n\n<p>上述都是一些m特殊的处理流程，等处理完后，就需要开始寻找g来进行执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if gp &#x3D;&#x3D; nil &amp;&amp; gcBlackenEnabled !&#x3D; 0 &#123;</span><br><span class=\"line\">\tgp &#x3D; gcController.findRunnableGCWorker(_g_.m.p.ptr())</span><br><span class=\"line\">\ttryWakeP &#x3D; tryWakeP || gp !&#x3D; nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\tif _g_.m.p.ptr().schedtick%61 &#x3D;&#x3D; 0 &amp;&amp; sched.runqsize &gt; 0 &#123;</span><br><span class=\"line\">\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\tgp &#x3D; globrunqget(_g_.m.p.ptr(), 1)</span><br><span class=\"line\">\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\tgp, inheritTime &#x3D; runqget(_g_.m.p.ptr())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码，基本上也就是3块逻辑：优先执行gc的g、其次查看是否需要获取全局列表、最后查看当前p的列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if gp.lockedm !&#x3D; 0 &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; Hands off own p to the locked m,</span><br><span class=\"line\">\t&#x2F;&#x2F; then blocks waiting for a new p.</span><br><span class=\"line\">\tstartlockedm(gp)</span><br><span class=\"line\">\tgoto top</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">execute(gp, inheritTime)</span><br></pre></td></tr></table></figure>\n\n<p>最后针对绑定的g进行特殊处理。否则就执行<code>execute</code>方法</p>\n<blockquote>\n<p>会从哪些地方去获取g？优先级是什么？</p>\n</blockquote>\n<h4 id=\"Execute函数\"><a href=\"#Execute函数\" class=\"headerlink\" title=\"Execute函数\"></a>Execute函数</h4><p>该函数主要功能切换当前上下文至指定的g中，具体源码如下，没有特别的逻辑，都是将g属性初始化一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func execute(gp *g, inheritTime bool) &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t_g_.m.curg &#x3D; gp</span><br><span class=\"line\">\tgp.m &#x3D; _g_.m</span><br><span class=\"line\">\tcasgstatus(gp, _Grunnable, _Grunning)</span><br><span class=\"line\">\tgp.waitsince &#x3D; 0</span><br><span class=\"line\">\tgp.preempt &#x3D; false</span><br><span class=\"line\">\tgp.stackguard0 &#x3D; gp.stack.lo + _StackGuard</span><br><span class=\"line\">\tif !inheritTime &#123;</span><br><span class=\"line\">\t\t_g_.m.p.ptr().schedtick++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgogo(&amp;gp.sched)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>gogo</code>方法是真正在汇编层切换寄存器的逻辑，传入的sched就是这个g的上下文信息，包含4个寄存器信息，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·gogo(SB), NOSPLIT, $16-8</span><br><span class=\"line\">\tMOVQ\tbuf+0(FP), BX\t\t&#x2F;&#x2F; gobuf</span><br><span class=\"line\">\tMOVQ\tgobuf_g(BX), DX</span><br><span class=\"line\">\tMOVQ\t0(DX), CX\t\t&#x2F;&#x2F; make sure g !&#x3D; nil</span><br><span class=\"line\">\tget_tls(CX)</span><br><span class=\"line\">\tMOVQ\tDX, g(CX)\t\t&#x2F;&#x2F; 保存g至tls中</span><br><span class=\"line\">\t&#x2F;&#x2F; 恢复sp，ax，dx，bp寄存器</span><br><span class=\"line\">\tMOVQ\tgobuf_sp(BX), SP\t&#x2F;&#x2F; restore SP</span><br><span class=\"line\">\tMOVQ\tgobuf_ret(BX), AX</span><br><span class=\"line\">\tMOVQ\tgobuf_ctxt(BX), DX</span><br><span class=\"line\">\tMOVQ\tgobuf_bp(BX), BP</span><br><span class=\"line\">\t&#x2F;&#x2F; 清空gobuf</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_sp(BX)\t&#x2F;&#x2F; clear to help garbage collector</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_ret(BX)</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_ctxt(BX)</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_bp(BX)</span><br><span class=\"line\">\tMOVQ\tgobuf_pc(BX), BX</span><br><span class=\"line\">\tJMP\tBX</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Goexit函数\"><a href=\"#Goexit函数\" class=\"headerlink\" title=\"Goexit函数\"></a>Goexit函数</h4><p>goexit方法是当当前线程执行完毕后执行的析构方法，设置的方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func gostartcallfn(gobuf *gobuf, fv *funcval) &#123;</span><br><span class=\"line\">    var fn unsafe.Pointer</span><br><span class=\"line\">    if fv !&#x3D; nil &#123;</span><br><span class=\"line\">        fn &#x3D; unsafe.Pointer(fv.fn)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        fn &#x3D; unsafe.Pointer(funcPC(nilfunc))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gostartcall(gobuf, fn, unsafe.Pointer(fv))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; adjust Gobuf as if it executed a call to fn with context ctxt</span><br><span class=\"line\">&#x2F;&#x2F; and then did an immediate gosave.</span><br><span class=\"line\">func gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) &#123;</span><br><span class=\"line\">    sp :&#x3D; buf.sp</span><br><span class=\"line\">    if sys.RegSize &gt; sys.PtrSize &#123;</span><br><span class=\"line\">        sp -&#x3D; sys.PtrSize</span><br><span class=\"line\">        *(*uintptr)(unsafe.Pointer(sp)) &#x3D; 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sp -&#x3D; sys.PtrSize</span><br><span class=\"line\">    *(*uintptr)(unsafe.Pointer(sp)) &#x3D; buf.pc &#x2F;&#x2F; 注意这里，这个，这里的 buf.pc 实际上是 goexit 的 pc</span><br><span class=\"line\">    buf.sp &#x3D; sp</span><br><span class=\"line\">    buf.pc &#x3D; uintptr(fn)</span><br><span class=\"line\">    buf.ctxt &#x3D; ctxt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 gostartcall 中把 newproc1 时设置到 buf.pc 中的 goexit 的函数地址放到了 goroutine 的栈顶，然后重新设置 buf.pc 为 goroutine 函数的位置。这样做的目的是为了在执行完任何 goroutine 的函数时，通过 RET 指令，都能从栈顶把 sp 保存的 goexit 的指令 pop 到 pc 寄存器，效果相当于任何 goroutine 执行函数执行完之后，都会去执行 runtime.goexit，完成一些清理工作后再进入 schedule。</p>\n<p>当前流程只剩下<code>goexit-&gt;goexit1-&gt;goexit0</code>，代码还算可读，直接上代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·goexit(SB),NOSPLIT,$0-0</span><br><span class=\"line\">\tBYTE\t$0x90\t&#x2F;&#x2F; NOP</span><br><span class=\"line\">\tCALL\truntime·goexit1(SB)\t&#x2F;&#x2F; does not return</span><br><span class=\"line\">\t&#x2F;&#x2F; traceback from goexit1 must hit code range of goexit</span><br><span class=\"line\">\tBYTE\t$0x90\t&#x2F;&#x2F; NOP</span><br><span class=\"line\"></span><br><span class=\"line\">\t... ... </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Finishes execution of the current goroutine.</span><br><span class=\"line\">func goexit1() &#123;</span><br><span class=\"line\">\tif raceenabled &#123;</span><br><span class=\"line\">\t\tracegoend()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif trace.enabled &#123;</span><br><span class=\"line\">\t\ttraceGoEnd()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmcall(goexit0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码来看，goexit和goexit1目标只是切换到g0协程中并执行<code>goexit0</code>中，第一部分，大部分都是变量清空，并清空当前的g状态置为_Gdead。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func goexit0(gp *g) &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcasgstatus(gp, _Grunning, _Gdead)</span><br><span class=\"line\">\tif isSystemGoroutine(gp, false) &#123;</span><br><span class=\"line\">\t\tatomic.Xadd(&amp;sched.ngsys, -1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp.m &#x3D; nil</span><br><span class=\"line\">\tlocked :&#x3D; gp.lockedm !&#x3D; 0</span><br><span class=\"line\">\tgp.lockedm &#x3D; 0</span><br><span class=\"line\">\t_g_.m.lockedg &#x3D; 0</span><br><span class=\"line\">\tgp.preemptStop &#x3D; false</span><br><span class=\"line\">\tgp.paniconfault &#x3D; false</span><br><span class=\"line\">\tgp._defer &#x3D; nil &#x2F;&#x2F; should be true already but just in case.</span><br><span class=\"line\">\tgp._panic &#x3D; nil &#x2F;&#x2F; non-nil for Goexit during panic. points at stack-allocated data.</span><br><span class=\"line\">\tgp.writebuf &#x3D; nil</span><br><span class=\"line\">\tgp.waitreason &#x3D; 0</span><br><span class=\"line\">\tgp.param &#x3D; nil</span><br><span class=\"line\">\tgp.labels &#x3D; nil</span><br><span class=\"line\">\tgp.timer &#x3D; nil</span><br><span class=\"line\">\tif gcBlackenEnabled !&#x3D; 0 &amp;&amp; gp.gcAssistBytes &gt; 0 &#123;</span><br><span class=\"line\">\t\tscanCredit :&#x3D; int64(gcController.assistWorkPerByte * float64(gp.gcAssistBytes))</span><br><span class=\"line\">\t\tatomic.Xaddint64(&amp;gcController.bgScanCredit, scanCredit)</span><br><span class=\"line\">\t\tgp.gcAssistBytes &#x3D; 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdropg()</span><br></pre></td></tr></table></figure>\n\n<p>清空完自身的g后，主要就剩下清理其他的信息，例如：写入g的队列中，清空m，进入调度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func goexit0(gp *g) &#123;</span><br><span class=\"line\">\t... ...</span><br><span class=\"line\">\tgfput(_g_.m.p.ptr(), gp)</span><br><span class=\"line\">\tif locked &#123;</span><br><span class=\"line\">\t\tif GOOS !&#x3D; &quot;plan9&quot; &#123; &#x2F;&#x2F; See golang.org&#x2F;issue&#x2F;22227.</span><br><span class=\"line\">\t\t\tgogo(&amp;_g_.m.g0.sched)</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t_g_.m.lockedExt &#x3D; 0</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tschedule()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"待办事项\"><a href=\"#待办事项\" class=\"headerlink\" title=\"待办事项\"></a>待办事项</h2><ul>\n<li>定时执行逻辑</li>\n<li>锁定线程逻辑</li>\n<li>tryWakeP逻辑</li>\n<li>findrunnable逻辑</li>\n<li>mcall、notesleep逻辑</li>\n<li>inheritTime功能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Golang调度是runtime中的核心部分，要说涉及到的东西，从基本的线程协程切换、GC的STW，到锁的暂停，都有相关涉猎。今天请个假休息一下，有空整理整理最近看的调度知识。</p>\n<h2 id=\"调度基本知识\"><a href=\"#调度基本知识\" class=\"headerlink\" title=\"调度基本知识\"></a>调度基本知识</h2><h3 id=\"进程、线程和协程\"><a href=\"#进程、线程和协程\" class=\"headerlink\" title=\"进程、线程和协程\"></a>进程、线程和协程</h3><p>进程和线程的区别都不用说了，简单来说就是，最初，大佬们觉得，每个任务肯定都有独立的内存空间、句柄等等等。只要保证程序直接能够不互相干扰就行。</p>\n<p>当机器性能不断的提升，程序员们发现，我任务太多了，需要执行很久，但是并不需要那么多的空间。如果照原来的方法每个任务都分配空间就特别耗时和耗资源，于是决定在进程的基础上拆分出线程，你只负责执行任务就行了。</p>\n<p>按道理，线程已经足够轻量，大数据时代又来了。现在需要大量的碎片计算，就像请求一个hello world，执行的任务不耗时，但是频繁。这时候的线程切换就是一个问题，主要原因是，线程的切换需要切换至操作系统的内核态，不断地做内存的复制，页表的cache很容易就失效，耗时因此增加。</p>\n<p>程序员再次想起，只要尽可能的不做内核态的切换，就可以减少这样的风险。于是出现了用户态的线程，也就是协程。</p>\n<h3 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h3><p>大家在学习Golang源码中可以顺便思考一下，为什么是GMP模型？这就引出《七周七并发模型》书中的其他的并发模型：</p>\n<ul>\n<li>通过无变量的函数式编程实现并发，是无锁并发的一种模型；</li>\n<li>Clojure对于状态和标识的分离，可以轻松实现内存事务模型；</li>\n<li>Erlang的Actor模型是容错性非常高的分布式并发模型；</li>\n<li>CSP模型是另一种分布式并发模型，被Go和Clojure采用；</li>\n<li>GPU的并行计算主要针对数据密集型计算的并行，搞游戏的一定要看；</li>\n<li>Hadoop和Storm分别适合超大数据量的批处理和流式处理。</li>\n</ul>\n<p>CSP（Communicating Sequential Processes）是由Tony Hoare在1978的论文上首次提出的。 它是处理并发编程的一种设计模式或者模型，指导并发程序的设计，提供了一种并发程序可实践的组织方法或者设计范式。通过此方法，可以减少并发程序引入的其它缺点，减少和规避并发程序的常见缺点和bug，并且可以被数学理论所论证。</p>\n<blockquote>\n<p>经典名言：Do not communicate by sharing memory; instead, share memory by communicating</p>\n</blockquote>\n<p>该模型主要的最终实现在于golang中的channel和goroutine。</p>\n<h3 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h3><p>在golang实现之前，其实解决线程切换开销大的问题可能有各种各样的方式。nginx中通过epollo来进行事件管理，还有python中的yield进行用户态的手动切换。这些都属于非抢占式的，核心问题就是如果中间出现过量的超时操作，很容易就会导致进程阻塞。</p>\n<p>而golang的GMP模型中参考操作系统中的线程切换制作了sysmon线程用于做协程的抢占操作。</p>\n<p>在GMP模型特殊之处也是在于中间P层的存在，在1.1之前，是不存在P层。这就导致了，G其实是挂载在全局的链表中。每次切换协程都会抢占一个全局锁，于是给GM中增加了一个P层。</p>\n<h3 id=\"特殊的线程、协程\"><a href=\"#特殊的线程、协程\" class=\"headerlink\" title=\"特殊的线程、协程\"></a>特殊的线程、协程</h3><p>在golang中，存在2个特殊的线程：sysmon、templateThread。前者主要用于实现golang的抢占式调度，后者则是作为fork线程时使用的模板线程。</p>\n<p>同时还存在一个特殊的协程：signalG，功能也就是用于接收进程的信号。</p>\n<p>这3者可以单独讲解。本文主要讲解整体的正常线程调度流程。</p>\n<h2 id=\"进程启动\"><a href=\"#进程启动\" class=\"headerlink\" title=\"进程启动\"></a>进程启动</h2><h3 id=\"最初的入口和空间\"><a href=\"#最初的入口和空间\" class=\"headerlink\" title=\"最初的入口和空间\"></a>最初的入口和空间</h3><p>首先，golang的启动入口rt0_go（asm_arm64.s文件）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tMOVW\tR0, 8(RSP) &#x2F;&#x2F; argc</span><br><span class=\"line\">\tMOVD\tR1, 16(RSP) &#x2F;&#x2F; argv</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; create istack out of the given (operating system) stack.</span><br><span class=\"line\">\t&#x2F;&#x2F; _cgo_init may update stackguard.</span><br><span class=\"line\">\tMOVD\t$runtime·g0(SB), g</span><br><span class=\"line\">\tMOVD\tRSP, R7</span><br><span class=\"line\">\tMOVD\t$(-64*1024)(R7), R0</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard0(g)</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard1(g)</span><br><span class=\"line\">\tMOVD\tR0, (g_stack+stack_lo)(g)</span><br><span class=\"line\">\tMOVD\tR7, (g_stack+stack_hi)(g)</span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">nocgo:</span><br><span class=\"line\">\tBL\truntime·save_g(SB)</span><br><span class=\"line\">\t&#x2F;&#x2F; update stackguard after _cgo_init</span><br><span class=\"line\">\tMOVD\t(g_stack+stack_lo)(g), R0</span><br><span class=\"line\">\tADD\t$const__StackGuard, R0</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard0(g)</span><br><span class=\"line\">\tMOVD\tR0, g_stackguard1(g)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; set the per-goroutine and per-mach &quot;registers&quot;</span><br><span class=\"line\">\tMOVD\t$runtime·m0(SB), R0</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; save m-&gt;g0 &#x3D; g0</span><br><span class=\"line\">\tMOVD\tg, m_g0(R0)</span><br><span class=\"line\">\t&#x2F;&#x2F; save m0 to g0-&gt;m</span><br><span class=\"line\">\tMOVD\tR0, g_m(g)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVW\t8(RSP), R0\t&#x2F;&#x2F; copy argc</span><br><span class=\"line\">\tMOVW\tR0, -8(RSP)</span><br><span class=\"line\">\tMOVD\t16(RSP), R0\t\t&#x2F;&#x2F; copy argv</span><br><span class=\"line\">\tMOVD\tR0, 0(RSP)</span><br></pre></td></tr></table></figure>\n\n<p>这段汇编其实不用特别讨论，主要做的就是初始化的一个流程：  </p>\n<ol>\n<li>赋值stack.lo和stack.hi属性</li>\n<li>保存g0对象</li>\n<li>设置m对象，包括m-&gt;g0、g0-&gt;m，做一个m0和g0的绑定</li>\n<li>复制argc和argv</li>\n</ol>\n<p>以上基本上就是一些属性的赋值，后续就是执行了一系列的初始化函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BL\truntime·args(SB)</span><br><span class=\"line\">BL\truntime·osinit(SB)</span><br><span class=\"line\">BL\truntime·schedinit(SB)</span><br></pre></td></tr></table></figure>\n\n<p>这3个函数，不是特别影响调度流程，具体功能主要是对一些功能进行初始化，例如内存管理、信号、mp链表、GC等功能的初始化。</p>\n<p>在以上部分，现在基本上只存在一个m0代表主线程，一个g0代表主线程中的g0空间，还要一个signalG空间（并不在执行链表中），同时初始化了maxprocs个p，且在m0上面挂载了一个p对象。这时候，需要开始执行main函数，则需要一个新的g来执行方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVD\t$runtime·mainPC(SB), R0\t\t&#x2F;&#x2F; entry</span><br><span class=\"line\">MOVD\tRSP, R7</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD.W\tR0, -8(R7)</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD.W\t$0, -8(R7)</span><br><span class=\"line\">MOVD\tR7, RSP</span><br><span class=\"line\">BL\truntime·newproc(SB)</span><br></pre></td></tr></table></figure>\n\n<p><code>newproc</code>方法会将<code>runtime.main</code>函数作为入参传入，功能等同于<code>go runtime.main()</code>。而<code>newproc</code>方法具体功能主要就是创建一个g并插入当前的p中。</p>\n<p>到这一步为止，整个进程还是只存在一个线程，但是存在3个g：g0、signalG、mainG。之后，就开始执行一个调度流程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BL\truntime·mstart(SB)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调度启动流程\"><a href=\"#调度启动流程\" class=\"headerlink\" title=\"调度启动流程\"></a>调度启动流程</h3><p>这是每个线程进入循环的入口。为什么这么说，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newosproc(mp *m) &#123;</span><br><span class=\"line\">\t... ...</span><br><span class=\"line\">\tret :&#x3D; clone(cloneFlags, stk, unsafe.Pointer(mp), unsafe.Pointer(mp.g0), unsafe.Pointer(funcPC(mstart)))</span><br></pre></td></tr></table></figure>\n<p>这就是创建一个线程的代码，印象中的线程创建是<code>thread_create</code>方法，底层最后还是调用的<code>clone</code>方法<a href=\"https://linux.die.net/man/2/clone\" target=\"_blank\" rel=\"noopener\">参考</a>，所有golang自行封装了一个方法。而这个调用的最后一个方法就是<code>mstart</code>方法。</p>\n<p>进入<code>mstart</code>方法后，核心功能具体可以分为4部分：  </p>\n<ol>\n<li>osStack的判断</li>\n<li>stackguard的赋值</li>\n<li>mstart1的调用</li>\n<li>mexit方法，m的退出函数</li>\n</ol>\n<p>首先，先确定stackguard的功能，通过汇编指令，我们可以看到每个函数中都能有一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime.main(SB) &#x2F;opt&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go</span><br><span class=\"line\">        proc.go:113             0x430690        64488b0c25f8ffffff      mov rcx, qword ptr fs:[0xfffffff8]</span><br><span class=\"line\">        proc.go:113             0x430699        483b6110                cmp rsp, qword ptr [rcx+0x10]</span><br><span class=\"line\">        proc.go:113             0x43069d        0f86f9020000            jbe 0x43099c</span><br><span class=\"line\">&#x3D;&gt;      proc.go:113             0x4306a3*       4883ec50                sub rsp, 0x50</span><br><span class=\"line\">        ... ...</span><br><span class=\"line\">        proc.go:113             0x43099c        e86f8b0200              call $runtime.morestack_noctxt</span><br><span class=\"line\">        &lt;autogenerated&gt;:1       0x4309a1        e9eafcffff              jmp $runtime.main</span><br></pre></td></tr></table></figure>\n<p>第一行和第二行的具体功能分别是从TLS中获取当前的g对象、得到stackguard属性值。<br>这一整段的代码也就是表示如果当前的rsp比stackguard小的话，就认为是需要进行栈扩展。具体的值，也就是stack.lo+_StackGuard(896)。这一段就不具体叙述。</p>\n<p>第二个问题是为什么要判断osStack？这就是要知道什么情况下会出现osStack，也就是系统栈空间。核心代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func allocm(_p_ *p, fn func()) *m &#123;</span><br><span class=\"line\">    ... ...</span><br><span class=\"line\">\tif iscgo || GOOS &#x3D;&#x3D; &quot;solaris&quot; || GOOS &#x3D;&#x3D; &quot;illumos&quot; || GOOS &#x3D;&#x3D; &quot;windows&quot; || GOOS &#x3D;&#x3D; &quot;plan9&quot; || GOOS &#x3D;&#x3D; &quot;darwin&quot; &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(-1)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tmp.g0 &#x3D; malg(8192 * sys.StackGuardMultiplier)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>主要是当创建m的时候，m里面的g0的栈根据不同的系统或者cgo会创建系统的栈空间，否则就会使用heap中的空间。而在<code>mstart</code>方法中，判断是否为osStack，主要是需要判断，当前的栈是否可复用，如果是操作系统自动分配的栈是不在heap中的，无法回收管理，所以直接释放，若是在heap中，则需要进行回收操作。</p>\n<p>而<code>mexit</code>函数，功能主要也是做一系列的变量释放、回收操作。后续会引出相关功能。</p>\n<p>之后，方法会进入<code>mstart1</code>函数中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func mstart1() &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_ !&#x3D; _g_.m.g0 &#123;</span><br><span class=\"line\">\t\tthrow(&quot;bad runtime·mstart&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsave(getcallerpc(), getcallersp())</span><br><span class=\"line\">\tasminit()</span><br><span class=\"line\">\tminit()</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_.m &#x3D;&#x3D; &amp;m0 &#123;</span><br><span class=\"line\">\t\tmstartm0()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif fn :&#x3D; _g_.m.mstartfn; fn !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfn()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif _g_.m !&#x3D; &amp;m0 &#123;</span><br><span class=\"line\">\t\tacquirep(_g_.m.nextp.ptr())</span><br><span class=\"line\">\t\t_g_.m.nextp &#x3D; 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先，当前方法保存了上一个函数的pc和sp地址，功能也就是为了调用mexit方法，这里不做叙述。再之后就是2个初始化方法，<code>asminit</code>方法，在大部分操作系统中是没有函数体的，而<code>minit</code>函数中，具体做的事情是信号的初始化，也就是每个m都有自己的一个信号栈。这一部分不在此次学习范围内。</p>\n<p>而后续的<code>mstartm0</code>函数，功能具体描述大致有2部分：创建扩展的线程、初始化信号回调方法。俩者也就是只会在m0上面执行一次，不在调度功能内，暂时不做过多介绍。</p>\n<blockquote>\n<p>问：扩展线程的功能是干嘛的？</p>\n</blockquote>\n<p>再之后就会有<code>mstartfn</code>函数的执行，这一个函数具体会存在3种情况：sysmon抢占线程、templateThread模板线程、mspinning自旋方法。前2者在前面也提到过是2个特殊的线程，进入后便会不断的轮询等待。后者的自旋只是对当前的m做了一个自旋的标记。</p>\n<p>而后，针对非m0的m要进行一个p的绑定，m0为啥不需要呢？当然是因为m0在之前就已经绑定好了。</p>\n<h3 id=\"开始调度循环\"><a href=\"#开始调度循环\" class=\"headerlink\" title=\"开始调度循环\"></a>开始调度循环</h3><p>题目是调度循环，而代码中其实是没有一个for循环，最后的逻辑是进入了一个execute方法，那具体是如何实现循环？</p>\n<p>循环具体涉及到了几个函数的循环：<code>schedule-&gt;execute-&gt;goexit-&gt;goexit1-&gt;goexit0-&gt;schedule</code></p>\n<h4 id=\"Schedule函数\"><a href=\"#Schedule函数\" class=\"headerlink\" title=\"Schedule函数\"></a>Schedule函数</h4><p>函数的第一段逻辑，主要会判断当前m是否存在绑定的g，如果存在，则暂停当前m，而后执行<code>lockedg</code>。Why？这一段不是主流程，稍后再看。</p>\n<blockquote>\n<p>什么情况下会从暂停m？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if _g_.m.lockedg !&#x3D; 0 &#123;</span><br><span class=\"line\">\tstoplockedm()</span><br><span class=\"line\">\texecute(_g_.m.lockedg.ptr(), false) &#x2F;&#x2F; Never returns.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后就是<code>gcwaiting</code>变量的判断，该变量不为0的情况主要是在GC的STW阶段。如果是STW阶段，则会暂停当前的m，等到startTheWorld时，会将所有的p唤醒。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if sched.gcwaiting !&#x3D; 0 &#123;</span><br><span class=\"line\">\tgcstopm()</span><br><span class=\"line\">\tgoto top</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面就是<code>runSafePointFn</code>这个名字，主要功能就是在GC前，需要打开所有的p读写屏障。而这个逻辑，就是简单的需要保证每个P都需要执行一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if pp.runSafePointFn !&#x3D; 0 &#123;</span><br><span class=\"line\">\trunSafePointFn()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再之后就是执行当前p上挂载的定时器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkTimers(pp, 0)</span><br></pre></td></tr></table></figure>\n\n<p>上述都是一些m特殊的处理流程，等处理完后，就需要开始寻找g来进行执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if gp &#x3D;&#x3D; nil &amp;&amp; gcBlackenEnabled !&#x3D; 0 &#123;</span><br><span class=\"line\">\tgp &#x3D; gcController.findRunnableGCWorker(_g_.m.p.ptr())</span><br><span class=\"line\">\ttryWakeP &#x3D; tryWakeP || gp !&#x3D; nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\tif _g_.m.p.ptr().schedtick%61 &#x3D;&#x3D; 0 &amp;&amp; sched.runqsize &gt; 0 &#123;</span><br><span class=\"line\">\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\tgp &#x3D; globrunqget(_g_.m.p.ptr(), 1)</span><br><span class=\"line\">\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if gp &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\tgp, inheritTime &#x3D; runqget(_g_.m.p.ptr())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码，基本上也就是3块逻辑：优先执行gc的g、其次查看是否需要获取全局列表、最后查看当前p的列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if gp.lockedm !&#x3D; 0 &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; Hands off own p to the locked m,</span><br><span class=\"line\">\t&#x2F;&#x2F; then blocks waiting for a new p.</span><br><span class=\"line\">\tstartlockedm(gp)</span><br><span class=\"line\">\tgoto top</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">execute(gp, inheritTime)</span><br></pre></td></tr></table></figure>\n\n<p>最后针对绑定的g进行特殊处理。否则就执行<code>execute</code>方法</p>\n<blockquote>\n<p>会从哪些地方去获取g？优先级是什么？</p>\n</blockquote>\n<h4 id=\"Execute函数\"><a href=\"#Execute函数\" class=\"headerlink\" title=\"Execute函数\"></a>Execute函数</h4><p>该函数主要功能切换当前上下文至指定的g中，具体源码如下，没有特别的逻辑，都是将g属性初始化一遍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func execute(gp *g, inheritTime bool) &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t_g_.m.curg &#x3D; gp</span><br><span class=\"line\">\tgp.m &#x3D; _g_.m</span><br><span class=\"line\">\tcasgstatus(gp, _Grunnable, _Grunning)</span><br><span class=\"line\">\tgp.waitsince &#x3D; 0</span><br><span class=\"line\">\tgp.preempt &#x3D; false</span><br><span class=\"line\">\tgp.stackguard0 &#x3D; gp.stack.lo + _StackGuard</span><br><span class=\"line\">\tif !inheritTime &#123;</span><br><span class=\"line\">\t\t_g_.m.p.ptr().schedtick++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgogo(&amp;gp.sched)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而<code>gogo</code>方法是真正在汇编层切换寄存器的逻辑，传入的sched就是这个g的上下文信息，包含4个寄存器信息，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·gogo(SB), NOSPLIT, $16-8</span><br><span class=\"line\">\tMOVQ\tbuf+0(FP), BX\t\t&#x2F;&#x2F; gobuf</span><br><span class=\"line\">\tMOVQ\tgobuf_g(BX), DX</span><br><span class=\"line\">\tMOVQ\t0(DX), CX\t\t&#x2F;&#x2F; make sure g !&#x3D; nil</span><br><span class=\"line\">\tget_tls(CX)</span><br><span class=\"line\">\tMOVQ\tDX, g(CX)\t\t&#x2F;&#x2F; 保存g至tls中</span><br><span class=\"line\">\t&#x2F;&#x2F; 恢复sp，ax，dx，bp寄存器</span><br><span class=\"line\">\tMOVQ\tgobuf_sp(BX), SP\t&#x2F;&#x2F; restore SP</span><br><span class=\"line\">\tMOVQ\tgobuf_ret(BX), AX</span><br><span class=\"line\">\tMOVQ\tgobuf_ctxt(BX), DX</span><br><span class=\"line\">\tMOVQ\tgobuf_bp(BX), BP</span><br><span class=\"line\">\t&#x2F;&#x2F; 清空gobuf</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_sp(BX)\t&#x2F;&#x2F; clear to help garbage collector</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_ret(BX)</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_ctxt(BX)</span><br><span class=\"line\">\tMOVQ\t$0, gobuf_bp(BX)</span><br><span class=\"line\">\tMOVQ\tgobuf_pc(BX), BX</span><br><span class=\"line\">\tJMP\tBX</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Goexit函数\"><a href=\"#Goexit函数\" class=\"headerlink\" title=\"Goexit函数\"></a>Goexit函数</h4><p>goexit方法是当当前线程执行完毕后执行的析构方法，设置的方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func gostartcallfn(gobuf *gobuf, fv *funcval) &#123;</span><br><span class=\"line\">    var fn unsafe.Pointer</span><br><span class=\"line\">    if fv !&#x3D; nil &#123;</span><br><span class=\"line\">        fn &#x3D; unsafe.Pointer(fv.fn)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        fn &#x3D; unsafe.Pointer(funcPC(nilfunc))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gostartcall(gobuf, fn, unsafe.Pointer(fv))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; adjust Gobuf as if it executed a call to fn with context ctxt</span><br><span class=\"line\">&#x2F;&#x2F; and then did an immediate gosave.</span><br><span class=\"line\">func gostartcall(buf *gobuf, fn, ctxt unsafe.Pointer) &#123;</span><br><span class=\"line\">    sp :&#x3D; buf.sp</span><br><span class=\"line\">    if sys.RegSize &gt; sys.PtrSize &#123;</span><br><span class=\"line\">        sp -&#x3D; sys.PtrSize</span><br><span class=\"line\">        *(*uintptr)(unsafe.Pointer(sp)) &#x3D; 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sp -&#x3D; sys.PtrSize</span><br><span class=\"line\">    *(*uintptr)(unsafe.Pointer(sp)) &#x3D; buf.pc &#x2F;&#x2F; 注意这里，这个，这里的 buf.pc 实际上是 goexit 的 pc</span><br><span class=\"line\">    buf.sp &#x3D; sp</span><br><span class=\"line\">    buf.pc &#x3D; uintptr(fn)</span><br><span class=\"line\">    buf.ctxt &#x3D; ctxt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 gostartcall 中把 newproc1 时设置到 buf.pc 中的 goexit 的函数地址放到了 goroutine 的栈顶，然后重新设置 buf.pc 为 goroutine 函数的位置。这样做的目的是为了在执行完任何 goroutine 的函数时，通过 RET 指令，都能从栈顶把 sp 保存的 goexit 的指令 pop 到 pc 寄存器，效果相当于任何 goroutine 执行函数执行完之后，都会去执行 runtime.goexit，完成一些清理工作后再进入 schedule。</p>\n<p>当前流程只剩下<code>goexit-&gt;goexit1-&gt;goexit0</code>，代码还算可读，直接上代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·goexit(SB),NOSPLIT,$0-0</span><br><span class=\"line\">\tBYTE\t$0x90\t&#x2F;&#x2F; NOP</span><br><span class=\"line\">\tCALL\truntime·goexit1(SB)\t&#x2F;&#x2F; does not return</span><br><span class=\"line\">\t&#x2F;&#x2F; traceback from goexit1 must hit code range of goexit</span><br><span class=\"line\">\tBYTE\t$0x90\t&#x2F;&#x2F; NOP</span><br><span class=\"line\"></span><br><span class=\"line\">\t... ... </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Finishes execution of the current goroutine.</span><br><span class=\"line\">func goexit1() &#123;</span><br><span class=\"line\">\tif raceenabled &#123;</span><br><span class=\"line\">\t\tracegoend()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif trace.enabled &#123;</span><br><span class=\"line\">\t\ttraceGoEnd()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmcall(goexit0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在代码来看，goexit和goexit1目标只是切换到g0协程中并执行<code>goexit0</code>中，第一部分，大部分都是变量清空，并清空当前的g状态置为_Gdead。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func goexit0(gp *g) &#123;</span><br><span class=\"line\">\t_g_ :&#x3D; getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcasgstatus(gp, _Grunning, _Gdead)</span><br><span class=\"line\">\tif isSystemGoroutine(gp, false) &#123;</span><br><span class=\"line\">\t\tatomic.Xadd(&amp;sched.ngsys, -1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp.m &#x3D; nil</span><br><span class=\"line\">\tlocked :&#x3D; gp.lockedm !&#x3D; 0</span><br><span class=\"line\">\tgp.lockedm &#x3D; 0</span><br><span class=\"line\">\t_g_.m.lockedg &#x3D; 0</span><br><span class=\"line\">\tgp.preemptStop &#x3D; false</span><br><span class=\"line\">\tgp.paniconfault &#x3D; false</span><br><span class=\"line\">\tgp._defer &#x3D; nil &#x2F;&#x2F; should be true already but just in case.</span><br><span class=\"line\">\tgp._panic &#x3D; nil &#x2F;&#x2F; non-nil for Goexit during panic. points at stack-allocated data.</span><br><span class=\"line\">\tgp.writebuf &#x3D; nil</span><br><span class=\"line\">\tgp.waitreason &#x3D; 0</span><br><span class=\"line\">\tgp.param &#x3D; nil</span><br><span class=\"line\">\tgp.labels &#x3D; nil</span><br><span class=\"line\">\tgp.timer &#x3D; nil</span><br><span class=\"line\">\tif gcBlackenEnabled !&#x3D; 0 &amp;&amp; gp.gcAssistBytes &gt; 0 &#123;</span><br><span class=\"line\">\t\tscanCredit :&#x3D; int64(gcController.assistWorkPerByte * float64(gp.gcAssistBytes))</span><br><span class=\"line\">\t\tatomic.Xaddint64(&amp;gcController.bgScanCredit, scanCredit)</span><br><span class=\"line\">\t\tgp.gcAssistBytes &#x3D; 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdropg()</span><br></pre></td></tr></table></figure>\n\n<p>清空完自身的g后，主要就剩下清理其他的信息，例如：写入g的队列中，清空m，进入调度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func goexit0(gp *g) &#123;</span><br><span class=\"line\">\t... ...</span><br><span class=\"line\">\tgfput(_g_.m.p.ptr(), gp)</span><br><span class=\"line\">\tif locked &#123;</span><br><span class=\"line\">\t\tif GOOS !&#x3D; &quot;plan9&quot; &#123; &#x2F;&#x2F; See golang.org&#x2F;issue&#x2F;22227.</span><br><span class=\"line\">\t\t\tgogo(&amp;_g_.m.g0.sched)</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t_g_.m.lockedExt &#x3D; 0</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tschedule()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"待办事项\"><a href=\"#待办事项\" class=\"headerlink\" title=\"待办事项\"></a>待办事项</h2><ul>\n<li>定时执行逻辑</li>\n<li>锁定线程逻辑</li>\n<li>tryWakeP逻辑</li>\n<li>findrunnable逻辑</li>\n<li>mcall、notesleep逻辑</li>\n<li>inheritTime功能</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/golang-gmp/1767848-9c4b06362907280d.webp","slug":"1767848-9c4b06362907280d.webp","post":"ckct7ukps0002jtuy1dks7vob","modified":0,"renderable":0},{"_id":"source/_posts/golang-gmp/3184f3.jpg","slug":"3184f3.jpg","post":"ckct7ukps0002jtuy1dks7vob","modified":0,"renderable":0},{"_id":"source/_posts/golang-gmp/567399-d400f4b192f3dc48.webp","slug":"567399-d400f4b192f3dc48.webp","post":"ckct7ukps0002jtuy1dks7vob","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}